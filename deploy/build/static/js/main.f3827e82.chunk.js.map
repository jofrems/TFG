{"version":3,"sources":["www/store/hooks.ts","www/widgets/ScreenStackWidget/types.ts","www/widgets/ScreenStackWidget/actions.ts","www/widgets/LinkToWidget.tsx","www/widgets/LinkDispatchWidget.tsx","www/widgets/LoadingWidget/selectors.ts","www/widgets/LoadingWidget/LoadingWidget.tsx","www/theme/useStyle.ts","www/theme/Bar.tsx","www/theme/Spacer.tsx","www/screens/BlogScreen/types.ts","www/screens/BlogScreen/actions.ts","www/widgets/HeaderWidget.tsx","www/widgets/MessageWidget/types.ts","www/widgets/MessageWidget/actions.ts","www/widgets/MessageWidget/selectors.ts","www/widgets/MessageWidget/MessageWidget.tsx","www/store/multiplayer/types.ts","www/store/multiplayer/actions.ts","www/store/game/types.ts","www/store/game/actions.ts","www/screens/BlogScreen/selectors.ts","www/screens/PostScreen/types.ts","www/screens/PostScreen/actions.ts","www/screens/BlogScreen/BlogItem.tsx","www/widgets/ScreenStackWidget/selectors.ts","www/store/game/selectors.ts","www/store/player/selectors.ts","www/screens/PlayerScreen/PlayerHeader.tsx","www/widgets/ButtonDispatchWidget.tsx","www/screens/GameScreen/GameHeader.tsx","www/components/DiceComponent/types.ts","www/components/DiceComponent/actions.ts","www/components/index.ts","www/components/ElementsComponent.tsx","www/components/ResourcesComponent.tsx","www/components/DiceComponent/DicesComponent.tsx","www/screens/EntityScreen/EntityComponents.tsx","www/screens/EntityScreen/EntityListItem.tsx","www/screens/EntityScreen/EntityList.tsx","www/screens/GameScreen/HexComponent.tsx","www/components/OwnComponent/types.ts","www/components/OwnComponent/actions.ts","www/screens/GameScreen/VertexComponent.tsx","www/screens/GameScreen/RoadComponent.tsx","www/screens/GameScreen/HexGeneratorComponent.tsx","www/screens/GameScreen/DiceComponent.tsx","www/store/gamesList/selectors.ts","www/screens/GamesListScreen/GamesListItem.tsx","www/store/player/types.ts","www/store/player/actions.ts","www/store/gamesList/types.ts","www/store/gamesList/actions.ts","www/screens/PlayerScreen/PlayerFriendGames.tsx","www/screens/PostScreen/selectors.ts","www/screens/index.ts","www/screens/AddNextPlayerScreen.tsx","www/screens/BlogScreen/BlogScreen.tsx","www/screens/CreateGameScreen.tsx","www/screens/EntityScreen/EntityScreen.tsx","www/screens/GameScreen/GameScreen.tsx","www/screens/GamesListScreen/GamesListScreen.tsx","www/screens/LoginScreen.tsx","www/screens/PlayerScreen/PlayerScreen.tsx","www/screens/PostScreen/PostScreen.tsx","www/screens/SignUpScreen.tsx","www/screens/WelcomeScreen.tsx","www/widgets/ScreenStackWidget/ScreenStackWidget.tsx","www/App.tsx","reportWebVitals.ts","www/components/reducers.ts","www/components/OwnComponent/reducers.ts","www/components/DiceComponent/reducers.ts","www/widgets/LoadingWidget/types.ts","www/widgets/ScreenStackWidget/reducers.ts","www/widgets/reducers.ts","www/widgets/LoadingWidget/reducers.ts","www/widgets/MessageWidget/reducers.ts","www/screens/BlogScreen/reducers.ts","www/screens/reducers.ts","www/screens/PostScreen/reducers.ts","www/store/multiplayer/reducers.ts","www/store/storeReducer.ts","www/store/game/reducers.ts","www/store/gamesList/reducers.ts","www/store/player/reducers.ts","www/widgets/MessageWidget/fetchAndDispatchMessage.ts","www/widgets/LoadingWidget/actions.ts","www/store/game/gamePost.tsx","www/components/OwnComponent/middleware.ts","www/components/middleware.ts","www/components/DiceComponent/middleware.ts","www/screens/BlogScreen/middleware.ts","www/screens/PostScreen/middleware.ts","www/screens/middleware.ts","www/store/game/middleware.ts","www/store/gamesList/middleware.ts","www/store/multiplayer/selectors.ts","www/store/multiplayer/middleware.ts","www/store/player/middleware.ts","www/store/storeMiddlewares.ts","www/store/freezeReducer.ts","www/index.tsx","www/store/index.ts"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","useInputRef","useRef","useDispatchForm","actionCreator","refs","dispatch","useCallback","values","map","ref","current","value","useDispatchFormBig","SCREEN_PUSHED","SCREEN_POPPED","screenPushed","name","id","type","screen","screenPopped","LinkTo","children","go","role","onClick","LinkDispatch","createAction","isLoading","state","widgetLoading","LoadingWidget","data-testid","bgColors","white","lightgray","gray","success","danger","barStyle","backgroundColor","padding","display","Bar","color","style","customStyle","useMemo","result","useStyle","Spacer","flex","BLOG_PUSHED","BLOG_REPLACED","blogPushed","blogReplaced","blog","HeaderWidget","MESSAGE_SHOWN","MESSAGE_DISMISSED","messageShown","text","isError","message","getMessage","widgetMessage","MessageWidget","dismiss","NEXT_PLAYER_ADDED","NEXT_PLAYER_CHANGED","NEXT_PLAYER_PUSHED","nextPlayerAdded","playerName","password","form","nextPlayerChanged","nextPlayerPushed","token","player","GAME_CREATED","GAME_JOINED","GAME_PLAYED","GAME_REFRESHED","GAME_REPLACED","ROUND_ENDED","gameCreated","gameName","gamePlayed","creatorName","gameReplaced","game","gameRefreshed","roundEnded","getBlog","screenBlog","POST_PUSHED","POST_REPLACED","postReplaced","post","BlogItem","goToPost","postId","frontMatter","writer","coder","slice","title","getCurrentScreenName","widgetScreenStack","length","getCurrentScreenId","getGame","makeGetAllGameEntities","createSelector","Object","entities","getPlayer","getPlayerToken","getPlayerName","PlayerHeader","ButtonDispatch","GameHeader","isGameScreen","roundNumber","playerNameTurn","ROLL","roll","entityId","Components","entity","currentPlayer","owner","roads","towns","cities","lumber","brick","wool","grain","ore","rolls","dice1","dice2","EntityComponents","Component","index","EntityListItem","EntityList","className","Hex","styled","polygon","HexComponent","x","y","xJump","row","xOffsetDeg","column","yOffsetDeg","finalLoc","xTextOffset","textX","textY","TileType","fill","points","TileWeight","OWN","own","Vertex","circle","UpgradedVertex","rect","VertexComponent","owned","xOffset","yOffset","xPos","yPos","colour","hash","i","charCodeAt","toString","substr","upgraded","width","height","stroke","stroke-width","cx","cy","r","strokeWidth","fillOpacity","Road","EastRoad","WestRoad","WestEastRoad","RoadComponent","HexGeneratorComponent","viewBox","DiceComponent","getGamesList","gamesList","GamesListItem","item","join","play","isPlaying","joinedPlayerNames","includes","LOGGED_IN","PLAYER_REPLACED","SIGNED_UP","loggedIn","playerReplaced","signedUp","GAMES_BY_CREATOR_LISTED","GAMES_BY_PLAYER_LISTED","GAMES_LIST_REPLACED","MY_CREATED_GAMES_LISTED","MY_PLAYING_GAMES_LISTED","gamesByCreatorListed","gamesByPlayerListed","myCreatedGamesListed","myPlayingGamesListed","gamesListReplaced","PlayerFriendGames","friendNameRef","goFriendGames","getPost","screenPost","screenMap","addNextPlayer","playerNameRef","passwordRef","add","cancel","fontSize","createGame","gameNameRef","s","getEntityById","getAllGameEntities","console","log","list","login","content","body","split","filter","l","signup","singUp","autoComplete","welcome","ScreenStackWidget","screenName","Screen","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","componentsReducers","componentOwn","action","componentDice","LOADING_STARTED","LOADING_FINISHED","initialState","widgetsReducers","screensReducers","currentPlayerIndex","players","reduceNextPlayerChanged","reduceNextPlayerPushed","newPlayers","some","p","push","storeReducer","combineReducers","multiplayer","fetchAndDispatchMessage","url","options","a","newOptions","JSON","stringify","headers","fetch","response","json","loadingStarted","loadingFinished","gamePost","getState","method","componentsMiddlewares","next","posts","postPushed","screensMiddlewares","joinGame","playGame","refreshGame","replacePlayer","endRound","listByCurrentPlayer","listByCurrentPlayingPlayer","listByCreator","games","listByPlayer","getMultiplayerCurrentPlayer","changeNextPlayer","storeMiddlewares","thunkMiddleware","frozens","WeakSet","freezeState","has","keys","forEach","k","val","freeze","freezeReducer","reduce","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3827e82.chunk.js","sourcesContent":["import { MutableRefObject, useCallback, useRef } from \"react\";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { AppState, AppDispatch } from \"./\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\n\nexport const useInputRef = () => useRef<null | HTMLInputElement>(null);\nexport const useDispatchForm = (\n  actionCreator: Function,\n  ...refs: (string | MutableRefObject<null | HTMLInputElement>)[]\n) => {\n  var dispatch = useAppDispatch();\n  return useCallback(() => {\n    const values = refs.map((ref) =>\n      typeof ref === \"string\" ? ref : ref.current?.value\n    );\n    dispatch(actionCreator(...values));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, actionCreator, ...refs]);\n};\n\nexport const useDispatchFormBig = (\n  actionCreator: Function,\n  ...refs: (string | undefined)[]\n) => {\n  var dispatch = useAppDispatch();\n  return useCallback(() => {\n    const values = refs.map((ref) => ref);\n    dispatch(actionCreator(...values));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, actionCreator, ...refs]);\n};\n","export interface ScreenDefinition {\n  name: string;\n  id?: string;\n}\n\nexport type ScreenStackState = ScreenDefinition[];\n\nexport const SCREEN_PUSHED = \"widgetScreenStack/SCREEN_PUSHED\";\nexport interface ScreenPushedAction {\n  type: typeof SCREEN_PUSHED;\n  screen: ScreenDefinition;\n}\n\nexport const SCREEN_POPPED = \"widgetScreenStack/SCREEN_POPPED\";\nexport interface ScreenPoppedAction {\n  type: typeof SCREEN_POPPED;\n}\n\nexport type ScreenStackActionTypes = ScreenPushedAction | ScreenPoppedAction;\n","import {\n  ScreenPoppedAction,\n  ScreenPushedAction,\n  SCREEN_POPPED,\n  SCREEN_PUSHED,\n} from \"./types\";\n\nexport function screenPushed(name: string, id?: string): ScreenPushedAction {\n  return {\n    type: SCREEN_PUSHED,\n    screen: {\n      name,\n      id,\n    },\n  };\n}\n\nexport function screenPopped(): ScreenPoppedAction {\n  return {\n    type: SCREEN_POPPED,\n  };\n}\n","import { useCallback } from \"react\";\nimport { useAppDispatch } from \"www/store/hooks\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\n\nexport function LinkTo({\n  name,\n  id,\n  children,\n}: {\n  name: string;\n  id?: string;\n  children: React.ReactChild;\n}) {\n  const dispatch = useAppDispatch();\n  const go = useCallback(\n    () => dispatch(screenPushed(name, id)),\n    [dispatch, name, id]\n  );\n\n  return (\n    <span role=\"link\" onClick={go}>\n      {children}\n    </span>\n  );\n}\n","import { useCallback } from \"react\";\nimport { AppActionType } from \"www/store\";\nimport { useAppDispatch } from \"www/store/hooks\";\n\nexport function LinkDispatch({\n  createAction,\n  children,\n}: {\n  createAction: () => AppActionType;\n  children: React.ReactNode;\n}) {\n  const dispatch = useAppDispatch();\n  const go = useCallback(\n    () => dispatch(createAction()),\n    [dispatch, createAction]\n  );\n\n  return (\n    <span role=\"link\" onClick={go}>\n      {children}\n    </span>\n  );\n}\n","import { AppState } from \"www/store\";\n\nexport function isLoading(state: AppState) {\n  return state.widgetLoading > 0;\n}\n","import { useAppSelector } from \"www/store/hooks\";\nimport { isLoading } from \"./selectors\";\n\nexport function LoadingWidget() {\n  const loading = useAppSelector(isLoading);\n  if (!loading) return null;\n\n  return <div data-testid=\"loading\">(Loading...)</div>;\n}\n","import { useMemo } from \"react\";\n\nconst bgColors: any = {\n  white: \"#eee\",\n  lightgray: \"#ddd\",\n  gray: \"#888\",\n  success: \"lightblue\",\n  danger: \"#e58370\",\n};\n\nexport function useStyle({ color }: { color: string }, customStyle: any) {\n  return useMemo(() => {\n    const result: any = { ...customStyle };\n\n    result.backgroundColor = bgColors[color];\n    return result;\n  }, [color, customStyle]);\n}\n","import { useStyle } from \"./useStyle\";\n\nconst barStyle = {\n  backgroundColor: \"#888\",\n  padding: \"1rem\",\n  display: \"flex\",\n};\n\nexport function Bar({\n  children,\n  role = \"\",\n  color = \"gray\",\n}: {\n  children: React.ReactNode;\n  role?: string;\n  color?: string;\n}) {\n  const style = useStyle({ color }, barStyle);\n\n  return (\n    <div role={role} style={style}>\n      {children}\n    </div>\n  );\n}\n","export function Spacer() {\n  return (\n    <div\n      style={{\n        flex: 1,\n      }}\n    />\n  );\n}\n","export interface BlogEntry {\n  id: string;\n  title: string;\n  frontMatter: {\n    coder: string;\n    writer: string;\n  };\n}\n\nexport type BlogState = BlogEntry[];\n\nexport const BLOG_PUSHED = \"screenBlog/BLOG_PUSHED\";\nexport interface BlogPushedAction {\n  type: typeof BLOG_PUSHED;\n}\n\nexport const BLOG_REPLACED = \"screenBlog/BLOG_REPLACED\";\nexport interface BlogReplacedAction {\n  type: typeof BLOG_REPLACED;\n  blog: BlogState;\n}\n\nexport type BlogActionTypes = BlogPushedAction | BlogReplacedAction;\n","import {\n  BlogPushedAction,\n  BlogReplacedAction,\n  BlogState,\n  BLOG_PUSHED,\n  BLOG_REPLACED,\n} from \"./types\";\n\nexport function blogPushed(): BlogPushedAction {\n  return {\n    type: BLOG_PUSHED,\n  };\n}\n\nexport function blogReplaced(blog: BlogState): BlogReplacedAction {\n  return {\n    type: BLOG_REPLACED,\n    blog,\n  };\n}\n","import { LinkTo } from \"./LinkToWidget\";\nimport { LinkDispatch } from \"./LinkDispatchWidget\";\nimport { LoadingWidget } from \"./LoadingWidget\";\nimport { Bar } from \"www/theme/Bar\";\nimport { Spacer } from \"www/theme/Spacer\";\nimport { blogPushed } from \"www/screens/BlogScreen/actions\";\n\nexport function HeaderWidget() {\n  return (\n    <Bar>\n      <LoadingWidget />\n      City Game!\n      <Spacer />\n      <LinkTo name=\"welcome\">Welcome</LinkTo>\n      <span>&nbsp;|&nbsp;</span>\n      <LinkDispatch createAction={blogPushed}>Blog</LinkDispatch>\n      <Spacer />\n      <LinkTo name=\"login\">Login</LinkTo>\n      <span>&nbsp;|&nbsp;</span>\n      <LinkTo name=\"addNextPlayer\">Multiplayer</LinkTo>\n    </Bar>\n  );\n}\n","export type MessageState = null | {\n  text: string;\n  isError: boolean;\n};\n\nexport const MESSAGE_SHOWN = \"messageWidget/SHOWN\";\nexport interface MessageShownAction {\n  type: typeof MESSAGE_SHOWN;\n  message: {\n    text: string;\n    isError: boolean;\n  };\n}\n\nexport const MESSAGE_DISMISSED = \"messageWidget/DISMISSED\";\nexport interface MessageDismissedAction {\n  type: typeof MESSAGE_DISMISSED;\n}\n\nexport type MessageActionTypes = MessageShownAction | MessageDismissedAction;\n","import {\n  MessageShownAction,\n  MessageDismissedAction,\n  MESSAGE_SHOWN,\n  MESSAGE_DISMISSED,\n} from \"./types\";\n\nexport function messageShown(\n  text: string,\n  isError: boolean = false\n): MessageShownAction {\n  return {\n    type: MESSAGE_SHOWN,\n    message: {\n      text,\n      isError,\n    },\n  };\n}\n\nexport function messageDismissed(): MessageDismissedAction {\n  return {\n    type: MESSAGE_DISMISSED,\n  };\n}\n","import { AppState } from \"www/store\";\nimport { MessageState } from \"./types\";\n\nexport function getMessage(state: AppState): MessageState {\n  return state.widgetMessage;\n}\n","import { useCallback } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"www/store/hooks\";\nimport { messageDismissed } from \"./actions\";\nimport { getMessage } from \"./selectors\";\nimport { Bar } from \"www/theme/Bar\";\nimport { Spacer } from \"www/theme/Spacer\";\n\nexport function MessageWidget() {\n  const dispatch = useAppDispatch();\n  const dismiss = useCallback(() => dispatch(messageDismissed()), [dispatch]);\n  const message = useAppSelector(getMessage);\n  if (!message) return null;\n\n  return (\n    <Bar role=\"alert\" color={message.isError ? \"danger\" : \"success\"}>\n      {message.isError && \"⚠ \"} {message.text}\n      <Spacer />\n      <button onClick={dismiss}>dismiss</button>\n    </Bar>\n  );\n}\n","export type MultiplayerState = {\n  currentPlayerIndex: number;\n  players: { playerName: string; token: string }[];\n};\n\nexport const NEXT_PLAYER_ADDED = \"multiplayer/NEXT_PLAYER_ADDED\";\nexport interface NextPlayerAddedAction {\n  type: typeof NEXT_PLAYER_ADDED;\n  form: {\n    playerName: string;\n    password: string;\n  };\n}\n\nexport const NEXT_PLAYER_CHANGED = \"multiplayer/NEXT_PLAYER_CHANGED\";\nexport interface NextPlayerChangedAction {\n  type: typeof NEXT_PLAYER_CHANGED;\n}\n\nexport const NEXT_PLAYER_PUSHED = \"multiplayer/NEXT_PLAYER_PUSHED\";\nexport interface NextPlayerPushedAction {\n  type: typeof NEXT_PLAYER_PUSHED;\n  player: {\n    playerName: string;\n    token: string;\n  };\n}\n\nexport type MultiplayerActionTypes =\n  | NextPlayerPushedAction\n  | NextPlayerChangedAction\n  | NextPlayerAddedAction;\n","import {\n  NextPlayerAddedAction,\n  NextPlayerChangedAction,\n  NextPlayerPushedAction,\n  NEXT_PLAYER_ADDED,\n  NEXT_PLAYER_CHANGED,\n  NEXT_PLAYER_PUSHED,\n} from \"./types\";\n\nexport function nextPlayerAdded(\n  playerName: string,\n  password: string\n): NextPlayerAddedAction {\n  return {\n    type: NEXT_PLAYER_ADDED,\n    form: {\n      playerName,\n      password,\n    },\n  };\n}\n\nexport function nextPlayerChanged(): NextPlayerChangedAction {\n  return {\n    type: NEXT_PLAYER_CHANGED,\n  };\n}\n\nexport function nextPlayerPushed(\n  playerName: string,\n  token: string\n): NextPlayerPushedAction {\n  return {\n    type: NEXT_PLAYER_PUSHED,\n    player: {\n      playerName,\n      token,\n    },\n  };\n}\n","type EntityState = {\n  id: string;\n  [key: string]: any;\n};\n\nexport type GameState = null | {\n  gameName: string;\n  creatorName: string;\n  roundNumber: number;\n  playerName: string;\n  playerNameTurn: string;\n  token: string;\n  entities: {\n    [id: string]: EntityState;\n  };\n};\n\nexport const GAME_CREATED = \"game/CREATED\";\nexport interface GameCreatedAction {\n  type: typeof GAME_CREATED;\n  form: {\n    gameName: string;\n  };\n}\n\nexport const GAME_JOINED = \"game/JOINED\";\nexport interface GameJoinedAction {\n  type: typeof GAME_JOINED;\n  form: {\n    gameName: string;\n    creatorName: string;\n  };\n}\n\nexport const GAME_PLAYED = \"game/PLAYED\";\nexport interface GamePlayedAction {\n  type: typeof GAME_PLAYED;\n  form: {\n    gameName: string;\n    creatorName: string;\n  };\n}\n\nexport const GAME_REFRESHED = \"game/REFRESHED\";\nexport interface GameRefreshedAction {\n  type: typeof GAME_REFRESHED;\n}\n\nexport const GAME_REPLACED = \"game/REPLACED\";\nexport interface GameReplacedAction {\n  type: typeof GAME_REPLACED;\n  game: GameState;\n}\n\nexport const ROUND_ENDED = \"game/ROUND_ENDED\";\nexport interface RoundEndedAction {\n  type: typeof ROUND_ENDED;\n}\n\nexport type GameActionTypes =\n  | GameCreatedAction\n  | GameJoinedAction\n  | GamePlayedAction\n  | GameRefreshedAction\n  | GameReplacedAction\n  | RoundEndedAction;\n","import {\n  GameCreatedAction,\n  GameJoinedAction,\n  GamePlayedAction,\n  GameReplacedAction,\n  GameState,\n  GAME_CREATED,\n  GAME_JOINED,\n  GAME_PLAYED,\n  GAME_REPLACED,\n  GameRefreshedAction,\n  GAME_REFRESHED,\n  RoundEndedAction,\n  ROUND_ENDED,\n} from \"./types\";\n\nexport function gameCreated(gameName: string): GameCreatedAction {\n  return {\n    type: GAME_CREATED,\n    form: {\n      gameName,\n    },\n  };\n}\n\nexport function gameJoined(\n  gameName: string,\n  creatorName: string\n): GameJoinedAction {\n  return {\n    type: GAME_JOINED,\n    form: {\n      gameName,\n      creatorName,\n    },\n  };\n}\n\nexport function gamePlayed(\n  gameName: string,\n  creatorName: string\n): GamePlayedAction {\n  return {\n    type: GAME_PLAYED,\n    form: {\n      gameName,\n      creatorName,\n    },\n  };\n}\n\nexport function gameReplaced(game: GameState): GameReplacedAction {\n  return {\n    type: GAME_REPLACED,\n    game,\n  };\n}\n\nexport function gameRefreshed(): GameRefreshedAction {\n  return {\n    type: GAME_REFRESHED,\n  };\n}\n\nexport function roundEnded(): RoundEndedAction {\n  return {\n    type: ROUND_ENDED,\n  };\n}\n","import { AppState } from \"www/store\";\n\nexport function getBlog(state: AppState) {\n  return state.screenBlog;\n}\n","export type PostState = null | {\n  id: string;\n  title: string;\n  body: string;\n};\n\nexport const POST_PUSHED = \"screenPost/POST_PUSHED\";\nexport interface PostPushedAction {\n  type: typeof POST_PUSHED;\n  postId: string;\n}\n\nexport const POST_REPLACED = \"screenPost/POST_REPLACED\";\nexport interface PostReplacedAction {\n  type: typeof POST_REPLACED;\n  post: PostState;\n}\n\nexport type PostActionTypes = PostPushedAction | PostReplacedAction;\n","import {\n  PostPushedAction,\n  PostReplacedAction,\n  PostState,\n  POST_PUSHED,\n  POST_REPLACED,\n} from \"./types\";\n\nexport function postPushed(postId: string): PostPushedAction {\n  return {\n    type: POST_PUSHED,\n    postId,\n  };\n}\n\nexport function postReplaced(post: PostState): PostReplacedAction {\n  return {\n    type: POST_REPLACED,\n    post,\n  };\n}\n","import { useCallback } from \"react\";\nimport { useAppDispatch } from \"www/store/hooks\";\nimport { postPushed } from \"www/screens/PostScreen/actions\";\nimport { BlogEntry } from \"./types\";\n\nexport function BlogItem({ post }: { post: BlogEntry }) {\n  const dispatch = useAppDispatch();\n  const goToPost = useCallback(() => {\n    dispatch(postPushed(post.id));\n  }, [dispatch, post]);\n  const { writer, coder } = post.frontMatter;\n\n  return (\n    <li onClick={goToPost} style={{ color: !coder ? \"red\" : \"inherit\" }}>\n      <code>[{post.id.slice(0, 10)}]</code>{\" \"}\n      <span role=\"link\">{post.title}</span>\n      <small> by {writer}</small>\n      <small>, impl. {coder}</small>\n    </li>\n  );\n}\n","import { AppState } from \"www/store\";\n\nexport function getCurrentScreenName(state: AppState) {\n  return state.widgetScreenStack[state.widgetScreenStack.length - 1]?.name;\n}\nexport function getCurrentScreenId(state: AppState) {\n  return state.widgetScreenStack[state.widgetScreenStack.length - 1]?.id;\n}\n","import { AppState } from \"www/store\";\nimport { createSelector } from \"reselect\";\n\nexport function getGame(state: AppState) {\n  return state.game;\n}\n\nexport function getEntityById(\n  state: AppState,\n  { entityId }: { entityId: string }\n) {\n  return getGame(state)?.entities[entityId];\n}\n\nexport function makeGetAllGameEntities() {\n  return createSelector(getGame, (game) => Object.values(game!.entities));\n}\n","import { AppState } from \"www/store\";\n\nexport function getPlayer(state: AppState) {\n  return state.player;\n}\n\nexport function getPlayerToken(state: AppState) {\n  return getPlayer(state)?.token;\n}\n\nexport function getPlayerName(state: AppState) {\n  return getPlayer(state)?.playerName;\n}\n","import { useAppSelector } from \"www/store/hooks\";\nimport { nextPlayerChanged } from \"www/store/multiplayer/actions\";\nimport { getPlayer } from \"www/store/player/selectors\";\nimport { LinkDispatch } from \"www/widgets/LinkDispatchWidget\";\nimport { Bar } from \"www/theme/Bar\";\nimport { Spacer } from \"www/theme/Spacer\";\n\nexport function PlayerHeader({ color = \"lightgray\" }: { color?: string }) {\n  const player = useAppSelector(getPlayer);\n  if (!player) return null;\n\n  return (\n    <Bar color={color}>\n      <span data-testid=\"player-header\">Player {player.playerName}.</span>\n      <Spacer />\n      <LinkDispatch createAction={nextPlayerChanged}>Next</LinkDispatch>\n    </Bar>\n  );\n}\n","import { useCallback } from \"react\";\nimport { AppActionType } from \"www/store\";\nimport { useAppDispatch } from \"www/store/hooks\";\n\nexport function ButtonDispatch({\n  createAction,\n  children,\n}: {\n  createAction: () => AppActionType;\n  children: React.ReactNode;\n}) {\n  const dispatch = useAppDispatch();\n  const go = useCallback(\n    () => dispatch(createAction()),\n    [dispatch, createAction]\n  );\n\n  return <button onClick={go}>{children}</button>;\n}\n","import { gameRefreshed, roundEnded } from \"www/store/game/actions\";\nimport { getGame } from \"www/store/game/selectors\";\nimport { useAppSelector } from \"www/store/hooks\";\nimport { ButtonDispatch } from \"www/widgets/ButtonDispatchWidget\";\nimport { LinkDispatch } from \"www/widgets/LinkDispatchWidget\";\nimport { screenPopped } from \"www/widgets/ScreenStackWidget/actions\";\nimport { getCurrentScreenName } from \"www/widgets/ScreenStackWidget/selectors\";\nimport { Bar } from \"www/theme/Bar\";\nimport { Spacer } from \"www/theme/Spacer\";\n\nexport function GameHeader() {\n  const isGameScreen = useAppSelector(getCurrentScreenName) === \"game\";\n  const game = useAppSelector(getGame)!;\n  const { gameName, creatorName, roundNumber, playerNameTurn} = game;\n\n  return (\n    <Bar color=\"lightgray\">\n      {!isGameScreen && (\n        <>\n          <LinkDispatch createAction={screenPopped}>« Back</LinkDispatch>\n          &nbsp;|&nbsp;\n        </>\n      )}{\" \"}\n      <span data-testid=\"game-header\">\n        Game {gameName} created by {creatorName}, round {roundNumber}, Turn of {playerNameTurn}\n      </span>\n      <Spacer />\n      <ButtonDispatch createAction={roundEnded}>End Round</ButtonDispatch>&nbsp;\n      <ButtonDispatch createAction={gameRefreshed}>Refresh</ButtonDispatch>\n    </Bar>\n  );\n}\n","export type ComponentDiceState = null;\n\nexport const ROLL = \"componentDice/ROLL\";\nexport interface RollAction {\n  type: typeof ROLL;\n  entityId: string;\n  playerName: string;\n}\n\nexport type ComponentDiceActionTypes = RollAction;\n","import { RollAction, ROLL } from \"./types\";\n\nexport function roll(\n  entityId: string,\n  playerName: string\n): RollAction {\n  return {\n    type: ROLL,\n    entityId,\n    playerName,\n  };\n}\n","import { ElementsComponent } from \"./ElementsComponent\";\nimport { ResourcesComponent } from \"./ResourcesComponent\";\nimport { DicesComponent } from \"./DiceComponent/DicesComponent\";\n\n\nexport const Components = [\n  ElementsComponent,\n  ResourcesComponent,\n  DicesComponent\n];\n","import { useAppSelector } from \"www/store/hooks\";\nimport { getPlayerName } from \"www/store/player/selectors\";\n\nexport function ElementsComponent({ entity }: any) {\n  const currentPlayer = useAppSelector(getPlayerName);\n  if(entity.owner !== currentPlayer) return null;\n  return <>\n        <div> Elements: </div>\n        <div>&emsp;Roads: {entity.roads} 🛤</div>\n        <div>&emsp;Towns: {entity.towns} 🏘</div>\n        <div>&emsp;Cities: {entity.cities} 🏙</div>\n        </>\n}\n","import { useAppSelector } from \"www/store/hooks\";\nimport { getPlayerName } from \"www/store/player/selectors\";\n\nexport function ResourcesComponent({ entity }: any) {\n  const currentPlayer = useAppSelector(getPlayerName);\n  if(entity.owner !== currentPlayer) return null;\n  return <>\n        <div> Resources: </div>\n        <div>&emsp;Lumber: {entity.lumber} 🪵</div>\n        <div>&emsp;Brick: {entity.brick} 🧱</div>\n        <div>&emsp;Wool: {entity.wool} 🐑</div>\n        <div>&emsp;Grain: {entity.grain} 🌾</div>\n        <div>&emsp;Ore: {entity.ore} 🪨</div>\n        </>\n}\n","import { roll } from \"./actions\";\nimport { useAppSelector, useDispatchFormBig } from \"www/store/hooks\";\nimport { getPlayerName } from \"www/store/player/selectors\";\n\n\nexport function DicesComponent({ entity }: any) {\n  const currentPlayer = useAppSelector(getPlayerName);\n\n  const rolls = useDispatchFormBig(roll, entity.id, currentPlayer);\n  if(entity.type !== 'dice') return null; \n\n  return <>\n        <div> <h4>Dices:</h4> </div>\n        <div>&emsp;Dice 1: {entity.dice1} 🎲</div>\n        <div>&emsp;Dice 2: {entity.dice2} 🎲</div>\n        <button onClick={rolls}>Roll</button>\n\n        </>\n}\n","import { Components } from \"www/components/index\";\n\nexport function EntityComponents({ entity }: { entity: any }) {\n  return (\n    <>\n      {Components.map((Component: any, index) => (\n        <Component key={index} entity={entity} />\n      ))}\n    </>\n  );\n}\n","import { getPlayerName } from \"www/store/player/selectors\";\nimport { useAppSelector } from \"www/store/hooks\";\nimport { EntityComponents } from \"./EntityComponents\";\n\n\nexport function EntityListItem({ entity }: any) { \n\n  const currentPlayer = useAppSelector(getPlayerName);\n  if(currentPlayer !== entity.owner || entity.type !== 'inventory'){\n        return null;\n  }\n  return (\n     <EntityComponents entity={entity}/>\n  );\n}\n","import { EntityListItem } from \"./EntityListItem\";\n\nexport function EntityList({ entities }: any) {\n  return (\n    <ul className=\"list-group\">\n      {entities.map((entity: any) => (\n        <EntityListItem key={entity.id} entity={entity} />\n      ))}\n    </ul>\n  );\n}\n","import styled from \"styled-components\";\nimport \"./hex.css\";\n\nconst Hex = styled.polygon`\ncursor: pointer;\nfill-opacity: 0.4;\nstroke: #000;\nstroke-width: 1;\ntransform-box: fill-box;\ntransform-origin: center;\ntransform: rotate(30deg);\n`\n//transform-origin: 50% 50%;\n\n//transform: rotate(30deg);\n\n\n\nexport function HexComponent({ entity }: any) {\n\n  var SEA = -1;\n  var DESSERT = -2;\n  var LUMBER = 0;\n  var GRAIN = 1;\n  var WOOL = 2;\n  var BRICK = 3;\n  var ORE = 4;\n\n  var x = [0,37,112,150,112,37];\n  var y = [75,10,10,75,140,140];\n\n  var xJump = entity.row * 66;//113*entity.row;\n  var xOffsetDeg = 129*entity.column;\n  var yOffsetDeg = 113*entity.row;\n  var yJump = 0;//65*entity.column;\n  var finalLoc = `${x[0]+ xOffsetDeg + xJump+ 20},${y[0]+yOffsetDeg} ${x[1] + xOffsetDeg + xJump + 20},${y[1]+yOffsetDeg } ${x[2] + xOffsetDeg + xJump + 20},${y[2]+yOffsetDeg } ${x[3] +xOffsetDeg + xJump + 20},${y[3]+yOffsetDeg } ${x[4] + xOffsetDeg + xJump + 20},${y[4]+yOffsetDeg} ${x[5] + xOffsetDeg + xJump + 20},${y[5]+yOffsetDeg }`\n \n  var xTextOffset = 129 *entity.column + entity.row *66; \n  var textX = `${x[0]+ xTextOffset + 85}`;\n  var textY = `${y[0]+115*entity.row}`;\n  var color = \"\";\n\n      switch(entity.TileType){\n        case DESSERT:\n          color=\"#663300\";\n          break;\n        case SEA:\n          color=\"#0080FF\";\n          break;\n        case LUMBER:\n          color=\"#006600\";\n          break;\n        case GRAIN:\n          color=\"#FFFF33\";\n          break;\n        case WOOL:\n          color=\"#80FF00\";\n          break;\n        case BRICK:\n          color=\"#FF9933\";\n          break;\n        case ORE:\n          color=\"#C0C0C0\";\n          break;\n        default:\n          color=\"#000000\";\n      }      \n  return (\n      <g id=\"hex\">\n        <Hex fill={color} points={finalLoc}></Hex>\n        <text x={textX} y={textY}> {entity.TileWeight}</text>\n      </g>    \n  );\n}\n","export type ComponentOwnState = null;\n\nexport const OWN = \"componentOwn/OWN\";\nexport interface OwnAction {\n  type: typeof OWN;\n  entityId: string;\n  playerName: string;\n}\n\nexport type ComponentOwnActionTypes = OwnAction;\n","import { OwnAction, OWN } from \"./types\";\n\nexport function own(\n  entityId: string,\n  playerName: string\n): OwnAction {\n  return {\n    type: OWN,\n    entityId,\n    playerName,\n  };\n}\n","\nimport styled from \"styled-components\";\nimport { useAppSelector, useDispatchFormBig } from \"www/store/hooks\";\nimport { getPlayerName } from \"www/store/player/selectors\";\nimport { own } from \"../../components/OwnComponent/actions\";\n\nconst Vertex = styled.circle`\ncursor: pointer;\n`\n\nconst UpgradedVertex = styled.rect`\ncursor: pointer;\n`\n\n/*\nfill-opacity: 0.4;\nstroke: #000;\nstroke-width: 1;\ntransition: transform, fill-opacity, stroke-width;\n-webkit-transition: transform, fill-opacity, stroke-width;\ntransition-duration: 1s;\n-webkit-transition-duration: 1s;;\n&:hover{\n  fill-opacity: 1;\n  stroke: #ff0000;\n  stroke-width: 5;\n}\n*/\n//transform-origin: 50% 50%;\n\n//transform: rotate(30deg);\n\n\n\nexport function VertexComponent({ entity }: any) { \n  const currentPlayer = useAppSelector(getPlayerName);\n  const owned = useDispatchFormBig(own, entity.id, currentPlayer);\n\n  if(entity.type !== \"vertex\") return null;\n\n\n    var xOffset = entity.row*65 +66;\n\n    var yOffset = entity.column*32;\n\n\n    if(entity.column > 1)\n        yOffset = yOffset + 45;\n    if(entity.column > 3)\n        yOffset = yOffset + 50;\n    if(entity.column > 5)\n        yOffset = yOffset + 50;\n    if(entity.column > 7)\n        yOffset = yOffset + 50;\n    if(entity.column > 9)\n        yOffset = yOffset + 50;\n    \n    var xPos = xOffset + 290;\n    var yPos = yOffset +115;\n    var entityId = entity.id;\n\n    //generem un color pel jugador aleatoriament\n    var colour= '#';\n\n    if(entity.owner != null){\n        var hash = 0;\n        for (var i = 0; i < entity.owner!.length; i++) {\n            hash = entity.owner!.charCodeAt(i) + ((hash << 5) - hash);\n        }\n        for (var i = 0; i < 3; i++) {\n             var value = (hash >> (i * 8)) & 0xFF;\n            colour += ('00' + value.toString(16)).substr(-2);\n        }\n    }else{\n        colour = \"white\"\n    }\n    \n  if(entity.upgraded){\n    xPos = xPos-20;\n    yPos = yPos -20;\n    return (\n        <g id=\"vertex\">\n          <UpgradedVertex id={entityId} x={xPos} y={yPos} width=\"40\" height=\"40\" stroke=\"black\" stroke-width=\"3\" fill={colour}  onClick={owned}></UpgradedVertex>\n        </g>    \n    ); \n  }\n  return (\n      <g id=\"vertex\">\n        <Vertex id={entityId} cx={xPos} cy={yPos} r=\"20\" stroke=\"black\" stroke-width=\"3\" strokeWidth={entity.owner != null ? 3 : 0  } fill={entity.owner != null ? colour : \"white\"} fillOpacity={entity.owner != null ? 1 : 0} onClick={owned}></Vertex>\n      </g>    \n  );\n}\n","\nimport styled from \"styled-components\";\nimport { useAppSelector, useDispatchFormBig } from \"www/store/hooks\";\nimport { getPlayerName } from \"www/store/player/selectors\";\nimport { own } from \"../../components/OwnComponent/actions\";\n\nconst Road = styled.rect`\ncursor: pointer;\ntransform-box: fill-box;\ntransform-origin: center;\n`\nconst EastRoad = styled.rect`\ncursor: pointer;\ntransform-box: fill-box;\ntransform-origin: center;\ntransform: rotate(30deg);\n`\n\nconst WestRoad = styled.rect`\ncursor: pointer;\ntransform-box: fill-box;\ntransform-origin: center;\ntransform: rotate(-30deg);\n\n`\n\nconst WestEastRoad = styled.rect`\ncursor: pointer;\ntransform-box: fill-box;\ntransform-origin: center;\ntransform: rotate(90deg);\n`\n\n/*\ncursor: pointer;\nfill-opacity: 0.4;\nstroke: #000;\nstroke-width: 1;\ntransition: transform, fill-opacity, stroke-width;\n-webkit-transition: transform, fill-opacity, stroke-width;\ntransition-duration: 1s;\n-webkit-transition-duration: 1s;;\ntransform-box: fill-box;\ntransform-origin: center;\ntransform: rotate(30deg);\n&:hover{\n  fill-opacity: 1;\n  stroke: #ff0000;\n  stroke-width: 5;\n}*/\n\n\n\nexport function RoadComponent({ entity }: any) { \n  const currentPlayer = useAppSelector(getPlayerName);\n  const owned = useDispatchFormBig(own, entity.id, currentPlayer);\n\n  if(entity.type !== \"road\") return null;\n\n   // console.log(\"row: \"+ entity.row + \"column: \"+entity.column);\n    var xOffset = entity.row*33;\n\n    var yOffset = entity.column*56;\n\n    \n    var xPos = xOffset+313;\n    var yPos = yOffset+125;\n    var entityId = entity.id;\n\n    //generem un color pel jugador aleatoriament\n    var colour= '#';\n\n    if(entity.owner != null){\n        var hash = 0;\n        for (var i = 0; i < entity.owner!.length; i++) {\n            hash = entity.owner!.charCodeAt(i) + ((hash << 5) - hash);\n        }\n        for (var i = 0; i < 3; i++) {\n             var value = (hash >> (i * 8)) & 0xFF;\n            colour += ('00' + value.toString(16)).substr(-2);\n        }\n    }else{\n        colour = \"white\"\n    }\n    \n    if(entity.column === 2 || entity.column === 6 || entity.column === 10){\n        if(entity.row === 3 || entity.row === 7 || entity.row === 11 || entity.row === 15 || entity.row ===19){\n            return (\n                <g id=\"road\">\n                    <WestRoad id={entityId} x={xPos} y={yPos} width=\"80\" height=\"20\"  stroke={entity.owner != null ? \"black\" : \"red\"} strokeWidth={entity.owner != null ? 3 : 0  } fill={entity.owner != null ? colour : \"white\"} fillOpacity={entity.owner != null ? 1 : 0} onClick={owned}></WestRoad>\n                </g>    \n            );\n        }else if(entity.row=== 1 ||  entity.row === 5 || entity.row === 9 || entity.row === 13|| entity.row === 17){\n                return (\n                    <g id=\"road\">\n                      <EastRoad id={entityId} x={xPos} y={yPos} width=\"80\" height=\"20\"  stroke={entity.owner != null ? \"black\" : \"red\"} strokeWidth={entity.owner != null ? 3 : 0  } fill={entity.owner != null ? colour : \"white\"} fillOpacity={entity.owner != null ? 1 : 0} onClick={owned}></EastRoad>\n                    </g>    \n                );\n        }else{\n                return (\n                    <g id=\"road\">\n                      <Road id={entityId} x={xPos} y={yPos} width=\"80\" height=\"20\"  stroke={entity.owner != null ? \"black\" : \"red\"} strokeWidth={entity.owner != null ? 3 : 0  } fill={entity.owner != null ? colour : \"white\"} fillOpacity={entity.owner != null ? 1 : 0} onClick={owned}></Road>\n                    </g>    \n                );\n        }\n    }else if(entity.column ===0 || entity.column ===4 || entity.column ===8){\n        if(entity.row === 3 || entity.row === 7 || entity.row === 11 || entity.row === 15 || entity.row ===19){\n            return (\n                <g id=\"road\">\n                    <EastRoad id={entityId} x={xPos} y={yPos} width=\"80\" height=\"20\"  stroke={entity.owner != null ? \"black\" : \"red\"} strokeWidth={entity.owner != null ? 3 : 0  } fill={entity.owner != null ? colour : \"white\"} fillOpacity={entity.owner != null ? 1 : 0} onClick={owned}></EastRoad>\n                </g>    \n            );\n            }else if(entity.row=== 1 ||  entity.row === 5 || entity.row === 9 || entity.row === 13 || entity.row === 17){\n                return (\n                    <g id=\"road\">\n                      <WestRoad id={entityId} x={xPos} y={yPos} width=\"80\" height=\"20\"  stroke={entity.owner != null ? \"black\" : \"red\"} strokeWidth={entity.owner != null ? 3 : 0  } fill={entity.owner != null ? colour : \"white\"} fillOpacity={entity.owner != null ? 1 : 0} onClick={owned}></WestRoad>\n                    </g>    \n                );\n            }else{\n                return (\n                    <g id=\"road\">\n                      <Road id={entityId} x={xPos} y={yPos} width=\"80\" height=\"20\"  stroke={entity.owner != null ? \"black\" : \"red\"} strokeWidth={entity.owner != null ? 3 : 0  } fill={entity.owner != null ? colour : \"white\"} fillOpacity={entity.owner != null ? 1 : 0} onClick={owned}></Road>\n                    </g>    \n                );\n            }\n    }else if (entity.column % 2 ===1){\n        return (\n            <g id=\"road\">\n                <WestEastRoad id={entityId} x={xPos} y={yPos} width=\"80\" height=\"20\"  stroke={entity.owner != null ? \"black\" : \"red\"} strokeWidth={entity.owner != null ? 3 : 0  } fill={entity.owner != null ? colour : \"white\"} fillOpacity={entity.owner != null ? 1 : 0} onClick={owned} ></WestEastRoad>\n            </g> \n        );\n    }\n    else{\n        return (\n            <g id=\"road\">\n              <Road id={entityId} x={xPos} y={yPos} width=\"80\" height=\"20\"  stroke={entity.owner != null ? \"black\" : \"red\"} strokeWidth={entity.owner != null ? 3 : 0  } fill={entity.owner != null ? colour : \"white\"} fillOpacity={entity.owner != null ? 1 : 0} onClick={owned}></Road>\n            </g>    \n        );\n    }\n  \n}\n","import { HexComponent } from \"./HexComponent\";\nimport { VertexComponent } from \"./VertexComponent\";\nimport { RoadComponent } from \"./RoadComponent\";\n\n\nexport function HexGeneratorComponent({ entities }: any) {\n    return (\n        <svg height=\"475\" width=\"100%\" viewBox=\"0 0 1280 720\">\n            {entities.map((entity: any) => {\n                if(entity.type === \"tile\")\n                    return <HexComponent key={entity.id} entity={entity} />\n                return <></>\n            })}\n\n            {entities.map((entity: any) => {\n                if(entity.type ===\"road\")\n                    return <RoadComponent key={entity.id} entity={entity}  />\n                else if(entity.type ===\"vertex\")\n                    return <VertexComponent key={entity.id} entity={entity}  />\n                return <></>\n            })}\n        </svg>\n    );\n  }","import { EntityComponents } from \"../EntityScreen/EntityComponents\";\n\n\n\nexport function DiceComponent({ entities }: any) {\n    return (\n        <div>\n            {entities.map((entity: any) => {\n                if(entity.type === \"dice\"){\n                    return <EntityComponents key={entity.id} entity={entity} />\n                }\n                return <></>\n            })}\n        </div>  \n    );\n  }","import { AppState } from \"www/store\";\nimport { GamesList } from \"./types\";\n\nexport function getGamesList(state: AppState): GamesList {\n  return state.gamesList;\n}\n","import { useCallback, useMemo } from \"react\";\nimport { gameJoined, gamePlayed } from \"www/store/game/actions\";\nimport { GamesListItem as GLI } from \"www/store/gamesList/types\";\nimport { useAppDispatch, useAppSelector } from \"www/store/hooks\";\nimport { getPlayerName } from \"www/store/player/selectors\";\n\nexport function GamesListItem({ item }: { item: GLI }) {\n  const dispatch = useAppDispatch();\n  const join = useCallback(\n    () => dispatch(gameJoined(item.gameName, item.creatorName)),\n    [dispatch, item]\n  );\n  const play = useCallback(\n    () => dispatch(gamePlayed(item.gameName, item.creatorName)),\n    [dispatch, item]\n  );\n  const currentPlayer = useAppSelector(getPlayerName)!;\n  const isPlaying = useMemo(\n    () => item.joinedPlayerNames.includes(currentPlayer),\n    [item, currentPlayer]\n  );\n\n  return (\n    <li>\n      Game {item.gameName} by {item.creatorName}\n      {isPlaying && \" (joined) \"}\n      <button onClick={join}>Join</button>\n      <button onClick={play}>Play</button>\n    </li>\n  );\n}\n","export type PlayerState = null | {\n  playerName: string;\n  token: string;\n};\n\nexport const LOGGED_IN = \"player/LOGGED_IN\";\nexport interface LoggedInAction {\n  type: typeof LOGGED_IN;\n  form: {\n    playerName: string;\n    password: string;\n  };\n}\n\nexport const PLAYER_REPLACED = \"player/REPLACED\";\nexport interface PlayerReplacedAction {\n  type: typeof PLAYER_REPLACED;\n  player: {\n    playerName: string;\n    token: string;\n  };\n}\n\nexport const SIGNED_UP = \"player/SIGNED_UP\";\nexport interface SignedUpAction {\n  type: typeof SIGNED_UP;\n  form: {\n    playerName: string;\n    password: string;\n  };\n}\n\nexport type PlayerActionTypes =\n  | LoggedInAction\n  | PlayerReplacedAction\n  | SignedUpAction;\n","import {\n  LoggedInAction,\n  LOGGED_IN,\n  PlayerReplacedAction,\n  PLAYER_REPLACED,\n  SignedUpAction,\n  SIGNED_UP,\n} from \"./types\";\n\nexport function loggedIn(playerName: string, password: string): LoggedInAction {\n  return {\n    type: LOGGED_IN,\n    form: {\n      playerName,\n      password,\n    },\n  };\n}\n\nexport function playerReplaced(\n  playerName: string,\n  token: string\n): PlayerReplacedAction {\n  return {\n    type: PLAYER_REPLACED,\n    player: {\n      playerName,\n      token,\n    },\n  };\n}\n\nexport function signedUp(playerName: string, password: string): SignedUpAction {\n  return {\n    type: SIGNED_UP,\n    form: {\n      playerName,\n      password,\n    },\n  };\n}\n","export type GamesListItem = {\n  gameName: string;\n  creatorName: string;\n  joinedPlayerNames: string[];\n};\n\nexport type GamesList = GamesListItem[];\n\nexport type GamesListState = GamesList;\n\nexport const GAMES_BY_CREATOR_LISTED = \"gamesList/GAMES_BY_CREATOR_LISTED\";\nexport interface GamesByCreatorListedAction {\n  type: typeof GAMES_BY_CREATOR_LISTED;\n  form: { playerName: string };\n}\n\nexport const GAMES_BY_PLAYER_LISTED = \"gamesList/GAMES_BY_PLAYER_LISTED\";\nexport interface GamesByPlayerListedAction {\n  type: typeof GAMES_BY_PLAYER_LISTED;\n}\n\nexport const GAMES_LIST_REPLACED = \"gamesList/GAMES_LIST_REPLACED\";\nexport interface GamesListReplacedAction {\n  type: typeof GAMES_LIST_REPLACED;\n  gamesList: GamesList;\n}\n\nexport const MY_CREATED_GAMES_LISTED = \"gamesList/MY_CREATED_GAMES_LISTED\";\nexport interface MyCreatedGamesListedAction {\n  type: typeof MY_CREATED_GAMES_LISTED;\n}\n\nexport const MY_PLAYING_GAMES_LISTED = \"gamesList/MY_PLAYING_GAMES_LISTED\";\nexport interface MyPlayingGamesListedAction {\n  type: typeof MY_PLAYING_GAMES_LISTED;\n}\n\nexport type GamesListActionTypes =\n  | GamesByCreatorListedAction\n  | GamesByPlayerListedAction\n  | GamesListReplacedAction\n  | MyCreatedGamesListedAction\n  | MyPlayingGamesListedAction;\n","import {\n  MY_CREATED_GAMES_LISTED,\n  MyCreatedGamesListedAction,\n  GamesByCreatorListedAction,\n  GAMES_BY_CREATOR_LISTED,\n  GamesList,\n  GamesListReplacedAction,\n  GAMES_LIST_REPLACED,\n  MyPlayingGamesListedAction,\n  MY_PLAYING_GAMES_LISTED,\n  GamesByPlayerListedAction,\n  GAMES_BY_PLAYER_LISTED,\n} from \"./types\";\n\nexport function gamesByCreatorListed(\n  playerName: string\n): GamesByCreatorListedAction {\n  return {\n    type: GAMES_BY_CREATOR_LISTED,\n    form: { playerName },\n  };\n}\n\nexport function gamesByPlayerListed(): GamesByPlayerListedAction {\n  return {\n    type: GAMES_BY_PLAYER_LISTED,\n  };\n}\n\nexport function myCreatedGamesListed(): MyCreatedGamesListedAction {\n  return {\n    type: MY_CREATED_GAMES_LISTED,\n  };\n}\n\nexport function myPlayingGamesListed(): MyPlayingGamesListedAction {\n  return {\n    type: MY_PLAYING_GAMES_LISTED,\n  };\n}\n\nexport function gamesListReplaced(\n  gamesList: GamesList\n): GamesListReplacedAction {\n  return {\n    type: GAMES_LIST_REPLACED,\n    gamesList,\n  };\n}\n","import { gamesByCreatorListed } from \"www/store/gamesList/actions\";\nimport { useDispatchForm, useInputRef } from \"www/store/hooks\";\n\nexport function PlayerFriendGames() {\n  const friendNameRef = useInputRef();\n  const goFriendGames = useDispatchForm(gamesByCreatorListed, friendNameRef);\n\n  return (\n    <div>\n      <label>\n        Friend name:\n        <br />\n        <input ref={friendNameRef} />\n      </label>\n      <br />\n      <button onClick={goFriendGames}>Friend games</button>\n    </div>\n  );\n}\n","import { AppState } from \"www/store\";\n\nexport function getPost(state: AppState) {\n  return state.screenPost;\n}\n","import { AddNextPlayerScreen } from \"./AddNextPlayerScreen\";\nimport { CreateGameScreen } from \"./CreateGameScreen\";\nimport { BlogScreen } from \"./BlogScreen\";\nimport { EntityScreen } from \"./EntityScreen/EntityScreen\";\nimport { GameScreen } from \"./GameScreen/GameScreen\";\nimport { GamesListScreen } from \"./GamesListScreen\";\nimport { LoginScreen } from \"./LoginScreen\";\nimport { PlayerScreen } from \"./PlayerScreen\";\nimport { PostScreen } from \"./PostScreen\";\nimport { SignUpScreen } from \"./SignUpScreen\";\nimport { WelcomeScreen } from \"./WelcomeScreen\";\n\nexport const screenMap: { [screenName: string]: Function } = {\n  addNextPlayer: AddNextPlayerScreen,\n  blog: BlogScreen,\n  createGame: CreateGameScreen,\n  entity: EntityScreen,\n  game: GameScreen,\n  gamesList: GamesListScreen,\n  login: LoginScreen,\n  player: PlayerScreen,\n  post: PostScreen,\n  signup: SignUpScreen,\n  welcome: WelcomeScreen,\n};\n","import { useCallback } from \"react\";\nimport { useAppDispatch, useDispatchForm, useInputRef } from \"www/store/hooks\";\nimport { nextPlayerAdded } from \"www/store/multiplayer/actions\";\nimport { screenPopped } from \"www/widgets/ScreenStackWidget/actions\";\n\nexport function AddNextPlayerScreen() {\n  const playerNameRef = useInputRef();\n  const passwordRef = useInputRef();\n  const add = useDispatchForm(nextPlayerAdded, playerNameRef, passwordRef);\n  const dispatch = useAppDispatch();\n  const cancel = useCallback(() => dispatch(screenPopped()), [dispatch]);\n\n  return (\n    <main>\n      <h1>Add next player!</h1>\n      <label>\n        Next player name:\n        <br />\n        <input ref={playerNameRef} />\n      </label>\n      <br />\n      <br />\n      <label>\n        Next player password:\n        <br />\n        <input ref={passwordRef} type=\"password\" />\n      </label>\n      <br />\n      <br />\n      <button onClick={add}>Join Next</button>{\" \"}\n      <button onClick={cancel}>Cancel</button>\n    </main>\n  );\n}\n","import { useAppSelector } from \"www/store/hooks\";\nimport { getBlog } from \"./selectors\";\nimport { BlogItem } from \"./BlogItem\";\n\nexport function BlogScreen() {\n  const blog = useAppSelector(getBlog);\n\n  return (\n    <main>\n      <h1>\n        Blog! <small style={{ fontSize: \"0.7rem\" }}>(#{blog.length})</small>\n      </h1>\n      <ul>\n        {blog.map((post) => (\n          <BlogItem key={post.id} post={post} />\n        ))}\n      </ul>\n    </main>\n  );\n}\n","import { useCallback } from \"react\";\nimport { useAppDispatch, useDispatchForm, useInputRef } from \"www/store/hooks\";\nimport { gameCreated } from \"www/store/game/actions\";\nimport { screenPopped } from \"www/widgets/ScreenStackWidget/actions\";\n\nexport function CreateGameScreen() {\n  const gameNameRef = useInputRef();\n  const createGame = useDispatchForm(gameCreated, gameNameRef);\n  const dispatch = useAppDispatch();\n  const cancel = useCallback(() => dispatch(screenPopped()), [dispatch]);\n\n  return (\n    <main>\n      <h1>Create game!</h1>\n      <label>\n        Game name:\n        <br />\n        <input ref={gameNameRef} />\n      </label>\n      <br />\n      <br />\n      <button onClick={createGame}>Create game</button>{\" \"}\n      <button onClick={cancel}>Cancel</button>\n    </main>\n  );\n}\n","import { useAppSelector } from \"www/store/hooks\";\nimport { getCurrentScreenId } from \"www/widgets/ScreenStackWidget/selectors\";\nimport { getEntityById } from \"www/store/game/selectors\";\nimport { PlayerHeader } from \"../PlayerScreen/PlayerHeader\";\nimport { GameHeader } from \"../GameScreen/GameHeader\";\nimport { EntityComponents } from \"./EntityComponents\";\n\nexport function EntityScreen() {\n  const entityId = useAppSelector(getCurrentScreenId)!;\n  const entity = useAppSelector((s) => getEntityById(s, { entityId }))!;\n  if (!entity) return null;\n\n  return (\n    <div>\n      <PlayerHeader />\n      <GameHeader />\n      <main>\n        <h1>\n          {entity.name} {entity.type} of {entity.owner}\n        </h1>\n        <EntityComponents entity={entity} />\n      </main>\n    </div>\n  );\n}\n","import { useMemo } from \"react\";\nimport { makeGetAllGameEntities } from \"www/store/game/selectors\";\nimport { useAppSelector } from \"www/store/hooks\";\nimport { PlayerHeader } from \"../PlayerScreen/PlayerHeader\";\nimport { EntityList } from \"../EntityScreen/EntityList\";\nimport { GameHeader } from \"./GameHeader\";\nimport { HexGeneratorComponent } from \"./HexGeneratorComponent\";\nimport { DiceComponent} from \"./DiceComponent\";\n\n\nexport function GameScreen() {\n  const getAllGameEntities = useMemo(makeGetAllGameEntities, []);\n  const entities = useAppSelector(getAllGameEntities);\n  console.log(\"entities\");\n \n  return (\n    <>\n      <PlayerHeader color=\"white\" />\n      <GameHeader />\n      <main>\n        <h1>Catan</h1>\n        <HexGeneratorComponent entities={entities}/>\n        <DiceComponent entities={entities}/>\n        <div>\n        <h4>Inventory:</h4>\n          <EntityList entities={entities} />\n        </div>\n      </main>\n    </>\n  );\n}\n","import { useCallback } from \"react\";\nimport { getGamesList } from \"www/store/gamesList/selectors\";\nimport { useAppDispatch, useAppSelector } from \"www/store/hooks\";\nimport { screenPopped } from \"www/widgets/ScreenStackWidget/actions\";\nimport { GamesListItem } from \"./GamesListItem\";\n\nexport function GamesListScreen() {\n  const list = useAppSelector(getGamesList);\n  const dispatch = useAppDispatch();\n  const cancel = useCallback(() => dispatch(screenPopped()), [dispatch]);\n\n  return (\n    <main>\n      <h1>Games List!</h1>\n      <ul>\n        {list?.map((item) => (\n          <GamesListItem\n            key={item.gameName + \"#\" + item.creatorName}\n            item={item}\n          />\n        ))}\n      </ul>\n      <button onClick={cancel}>Cancel</button>\n    </main>\n  );\n}\n","import { useDispatchForm, useInputRef } from \"www/store/hooks\";\nimport { loggedIn } from \"www/store/player/actions\";\n\nexport function LoginScreen() {\n  const playerNameRef = useInputRef();\n  const passwordRef = useInputRef();\n  const login = useDispatchForm(loggedIn, playerNameRef, passwordRef);\n\n  return (\n    <main>\n      <h1>Log In!</h1>\n\n      <label>\n        Player name:\n        <br />\n        <input ref={playerNameRef} />\n      </label>\n      <br />\n      <br />\n\n      <label>\n        Password:\n        <br />\n        <input ref={passwordRef} type=\"password\" />\n      </label>\n      <br />\n      <br />\n\n      <button onClick={login}>Login</button>\n    </main>\n  );\n}\n","import {\n  myCreatedGamesListed,\n  myPlayingGamesListed,\n} from \"www/store/gamesList/actions\";\nimport { LinkTo } from \"www/widgets/LinkToWidget\";\nimport { LinkDispatch } from \"www/widgets/LinkDispatchWidget\";\nimport { PlayerHeader } from \"./PlayerHeader\";\nimport { PlayerFriendGames } from \"./PlayerFriendGames\";\n\nexport function PlayerScreen() {\n  return (\n    <div>\n      <PlayerHeader />\n      <main>\n        <h1>Welcome player!</h1>\n        <LinkTo name=\"createGame\">Create game</LinkTo>\n        <br />\n        <br />\n        List games:\n        <br />\n        <LinkDispatch createAction={myPlayingGamesListed}>\n          - My playing games »\n        </LinkDispatch>\n        <br />\n        <LinkDispatch createAction={myCreatedGamesListed}>\n          - My created games »\n        </LinkDispatch>\n        <br />\n        <br />\n        <PlayerFriendGames />\n      </main>\n    </div>\n  );\n}\n","import { useAppSelector } from \"www/store/hooks\";\nimport { LinkDispatch } from \"www/widgets/LinkDispatchWidget\";\nimport { screenPopped } from \"www/widgets/ScreenStackWidget/actions\";\nimport { getPost } from \"./selectors\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport function PostScreen() {\n  const post = useAppSelector(getPost)!;\n  const content = post.body\n    .split(\"\\n\")\n    .filter((l) => !l.includes(\"SNAPSHOT\"))\n    .join(\"\\n\");\n\n  return (\n    <>\n      <div className=\"content\">\n        <LinkDispatch createAction={screenPopped}>« Back to blog</LinkDispatch>\n      </div>\n      <main>\n        <h1>{post.title}!</h1>\n        <ReactMarkdown children={content} />\n      </main>\n    </>\n  );\n}\n","import { useDispatchForm, useInputRef } from \"www/store/hooks\";\nimport { signedUp } from \"www/store/player/actions\";\n\nexport function SignUpScreen() {\n  const playerNameRef = useInputRef();\n  const passwordRef = useInputRef();\n  const singUp = useDispatchForm(signedUp, playerNameRef, passwordRef);\n\n  return (\n    <main>\n      <h1>Sign up!</h1>\n\n      <label>\n        Player name:\n        <br />\n        <input ref={playerNameRef} />\n      </label>\n\n      <br />\n      <br />\n      <label>\n        Password:\n        <br />\n        <input\n          ref={passwordRef}\n          type=\"password\"\n          autoComplete=\"current-password\"\n        />\n      </label>\n\n      <br />\n      <br />\n      <button onClick={singUp}>Signup</button>\n    </main>\n  );\n}\n","import { LinkTo } from \"www/widgets/LinkToWidget\";\n\nexport function WelcomeScreen() {\n  return (\n    <main>\n      <h1>Welcome to the game!</h1>\n      <LinkTo name=\"signup\">Sign up</LinkTo>\n    </main>\n  );\n}\n","import { screenMap } from \"www/screens\";\nimport { useAppSelector } from \"www/store/hooks\";\nimport { getCurrentScreenName } from \"./selectors\";\n\nexport function ScreenStackWidget() {\n  const screenName = useAppSelector(getCurrentScreenName) as any;\n  const Screen = screenMap[screenName];\n  if (!Screen) return <>`Screen \"${screenName}\" not found.`</>;\n\n  return <Screen />;\n}\n","import { Provider } from \"react-redux\";\nimport { HeaderWidget } from \"./widgets/HeaderWidget\";\nimport { MessageWidget } from \"./widgets/MessageWidget\";\nimport { ScreenStackWidget } from \"./widgets/ScreenStackWidget\";\n\nexport function App({ store }: { store: any }) {\n  return (\n    <Provider store={store}>\n      <div>\n        <HeaderWidget />\n        <MessageWidget />\n        <ScreenStackWidget />\n      </div>\n    </Provider>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { componentOwnReducer } from \"./OwnComponent/reducers\";\nimport { componentDiceReducer } from \"./DiceComponent/reducers\";\n\n\nexport const componentsReducers = {\n  componentOwn: componentOwnReducer,\n  componentDice: componentDiceReducer,\n\n};\n","import { ComponentOwnActionTypes, ComponentOwnState } from \"./types\";\n\nexport function componentOwnReducer(\n  state: ComponentOwnState = null,\n  action: ComponentOwnActionTypes\n) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n","import { ComponentDiceActionTypes, ComponentDiceState } from \"./types\";\n\nexport function componentDiceReducer(\n  state: ComponentDiceState = null,\n  action: ComponentDiceActionTypes\n) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n","export type LoadingState = number;\n\nexport const LOADING_STARTED = \"widgetLoading/STARTED\";\nexport interface LoadingStartedAction {\n  type: typeof LOADING_STARTED;\n}\n\nexport const LOADING_FINISHED = \"widgetLoading/FINISHED\";\nexport interface LoadingFinishedAction {\n  type: typeof LOADING_FINISHED;\n}\n\nexport type LoadingActionTypes = LoadingStartedAction | LoadingFinishedAction;\n","import {\n  SCREEN_PUSHED,\n  SCREEN_POPPED,\n  ScreenStackActionTypes,\n  ScreenStackState,\n} from \"./types\";\n\nconst initialState: ScreenStackState = [{ name: \"welcome\" }];\n\nexport function widgetScreenStackReducer(\n  state = initialState,\n  action: ScreenStackActionTypes\n) {\n  switch (action.type) {\n    case SCREEN_PUSHED:\n      return [...state, action.screen];\n    case SCREEN_POPPED:\n      return state.slice(0, state.length - 1);\n    default:\n      return state;\n  }\n}\n","import { widgetLoadingReducer } from \"./LoadingWidget/reducers\";\nimport { widgetMessageReducer } from \"./MessageWidget/reducers\";\nimport { widgetScreenStackReducer } from \"./ScreenStackWidget/reducers\";\n\nexport const widgetsReducers = {\n  widgetLoading: widgetLoadingReducer,\n  widgetMessage: widgetMessageReducer,\n  widgetScreenStack: widgetScreenStackReducer,\n};\n","import {\n  LoadingActionTypes,\n  LoadingState,\n  LOADING_FINISHED,\n  LOADING_STARTED,\n} from \"./types\";\n\nexport function widgetLoadingReducer(\n  state: LoadingState = 0,\n  action: LoadingActionTypes\n) {\n  switch (action.type) {\n    case LOADING_STARTED:\n      return state + 1;\n    case LOADING_FINISHED:\n      return state - 1;\n    default:\n      return state;\n  }\n}\n","import {\n  MESSAGE_DISMISSED,\n  MESSAGE_SHOWN,\n  MessageState,\n  MessageActionTypes,\n} from \"./types\";\n\nexport function widgetMessageReducer(\n  state: MessageState = null,\n  action: MessageActionTypes\n) {\n  switch (action.type) {\n    case MESSAGE_SHOWN:\n      return action.message;\n    case MESSAGE_DISMISSED:\n      return null;\n    default:\n      return state;\n  }\n}\n","import { BlogActionTypes, BlogState, BLOG_REPLACED } from \"./types\";\n\nconst initialState: BlogState = [];\n\nexport function screenBlogReducer(\n  state = initialState,\n  action: BlogActionTypes\n) {\n  switch (action.type) {\n    case BLOG_REPLACED:\n      return action.blog;\n    default:\n      return state;\n  }\n}\n","import { screenBlogReducer } from \"./BlogScreen/reducers\";\nimport { screenPostReducer } from \"./PostScreen/reducers\";\n\nexport const screensReducers = {\n  screenBlog: screenBlogReducer,\n  screenPost: screenPostReducer,\n};\n","import { PostActionTypes, PostState, POST_REPLACED } from \"./types\";\n\nconst initialState: PostState = null;\n\nexport function screenPostReducer(\n  state = initialState,\n  action: PostActionTypes\n) {\n  switch (action.type) {\n    case POST_REPLACED:\n      return action.post;\n    default:\n      return state;\n  }\n}\n","import {\n  MultiplayerActionTypes,\n  MultiplayerState,\n  NextPlayerChangedAction,\n  NextPlayerPushedAction,\n  NEXT_PLAYER_CHANGED,\n  NEXT_PLAYER_PUSHED,\n} from \"./types\";\n\nconst initialState: MultiplayerState = {\n  currentPlayerIndex: 0,\n  players: [],\n};\n\nexport function multiplayerReducer(\n  state: MultiplayerState = initialState,\n  action: MultiplayerActionTypes\n) {\n  switch (action.type) {\n    case NEXT_PLAYER_CHANGED:\n      return reduceNextPlayerChanged(state, action);\n    case NEXT_PLAYER_PUSHED:\n      return reduceNextPlayerPushed(state, action);\n    default:\n      return state;\n  }\n}\n\nfunction reduceNextPlayerChanged(\n  state: MultiplayerState,\n  action: NextPlayerChangedAction\n) {\n  return {\n    ...state,\n    currentPlayerIndex: (state.currentPlayerIndex + 1) % state.players.length,\n  };\n}\n\nfunction reduceNextPlayerPushed(\n  state: MultiplayerState,\n  action: NextPlayerPushedAction\n) {\n  const { players } = state;\n\n  const newPlayers = [...players];\n  const isAlreadyPresent = players.some(\n    (p) => p.playerName === action.player.playerName\n  );\n  if (!isAlreadyPresent) {\n    newPlayers.push(action.player);\n  }\n\n  return {\n    ...state,\n    players: newPlayers,\n    currentPlayerIndex: newPlayers.length - 1,\n  };\n}\n","import { combineReducers } from \"redux\";\nimport { componentsReducers } from \"www/components/reducers\";\nimport { widgetsReducers } from \"www/widgets/reducers\";\nimport { screensReducers } from \"www/screens/reducers\";\nimport { gameReducer } from \"./game/reducers\";\nimport { gamesListReducer } from \"./gamesList/reducers\";\nimport { multiplayerReducer } from \"./multiplayer/reducers\";\nimport { playerReducer } from \"./player/reducers\";\n\nexport const storeReducer = combineReducers({\n  ...componentsReducers,\n  ...widgetsReducers,\n  ...screensReducers,\n  game: gameReducer,\n  gamesList: gamesListReducer,\n  multiplayer: multiplayerReducer,\n  player: playerReducer,\n});\n","import { GameActionTypes, GameState, GAME_REPLACED } from \"./types\";\n\nexport function gameReducer(state: GameState = null, action: GameActionTypes) {\n  switch (action.type) {\n    case GAME_REPLACED:\n      return action.game;\n    default:\n      return state;\n  }\n}\n","import {\n  GamesListActionTypes,\n  GamesListState,\n  GAMES_LIST_REPLACED,\n} from \"./types\";\n\nexport function gamesListReducer(\n  state: GamesListState = [],\n  action: GamesListActionTypes\n) {\n  switch (action.type) {\n    case GAMES_LIST_REPLACED:\n      return action.gamesList;\n    default:\n      return state;\n  }\n}\n","import { PlayerActionTypes, PlayerState, PLAYER_REPLACED } from \"./types\";\n\nexport function playerReducer(\n  state: PlayerState = null,\n  action: PlayerActionTypes\n) {\n  switch (action.type) {\n    case PLAYER_REPLACED:\n      return action.player;\n    default:\n      return state;\n  }\n}\n","import { AppDispatch } from \"www/store\";\nimport { messageShown } from \"./actions\";\n\nexport async function fetchAndDispatchMessage(\n  url: Parameters<typeof fetch>[0],\n  options: Parameters<typeof fetch>[1],\n  dispatch: AppDispatch\n): Promise<any> {\n  const newOptions = {\n    ...options,\n    body: JSON.stringify(options?.body),\n    headers: { \"Content-Type\": \"application/json\" },\n  };\n  const response = await fetch(url, newOptions);\n\n  const body = await response.json();\n  if (typeof body.message === \"string\") {\n    dispatch(messageShown(body.message, body.isError));\n  }\n\n  return body;\n}\n","import {\n  LoadingFinishedAction,\n  LoadingStartedAction,\n  LOADING_FINISHED,\n  LOADING_STARTED,\n} from \"./types\";\n\nexport function loadingStarted(): LoadingStartedAction {\n  return {\n    type: LOADING_STARTED,\n  };\n}\n\nexport function loadingFinished(): LoadingFinishedAction {\n  return {\n    type: LOADING_FINISHED,\n  };\n}\n","import { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { getPlayerToken } from \"../player/selectors\";\nimport { gameReplaced } from \"./actions\";\nimport { GameState } from \"./types\";\n\nexport async function gamePost(\n  store: any,\n  url: string,\n  body: any,\n  success: (game: GameState) => Promise<void> | void = () => {}\n) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    `${url}?token=${token}`,\n    { method: \"POST\", body },\n    store.dispatch\n  );\n\n  store.dispatch(gameReplaced(result));\n  await success(result);\n\n  store.dispatch(loadingFinished());\n}\n","import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport { gamePost } from \"www/store/game/gamePost\";\nimport { ComponentOwnActionTypes, OWN } from \"./types\";\n\nexport const componentOwnMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action: ComponentOwnActionTypes) => {\n    next(action);\n    console.log(\"reach middleware + action: \"+action.type);\n    if (action.type === OWN) {\n      await gamePost(\n        store,\n        `/api/v1/owned/${action.entityId}/${action.playerName}/own`,\n        {}\n      );\n    }\n  };\n","import { componentOwnMiddleware } from \"./OwnComponent/middleware\";\nimport { componentDiceMiddleware } from \"./DiceComponent/middleware\";\n\n\nexport const componentsMiddlewares = [\n  //\n  componentOwnMiddleware,\n  componentDiceMiddleware,\n];\n","import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport { gamePost } from \"www/store/game/gamePost\";\nimport { ComponentDiceActionTypes, ROLL } from \"./types\";\n\nexport const componentDiceMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action: ComponentDiceActionTypes) => {\n    next(action);\n    console.log(\"reach middleware + action: \"+action.type);\n    if (action.type === ROLL) {\n      await gamePost(\n        store,\n        `/api/v1/dice/${action.entityId}/${action.playerName}/roll`,\n        {}\n      );\n    }\n  };\n","import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport { blogReplaced } from \"./actions\";\nimport { BLOG_PUSHED } from \"./types\";\n\nexport const blogMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === BLOG_PUSHED) await blogPushed(store);\n  };\n\nasync function blogPushed(store: any) {\n  store.dispatch(loadingStarted());\n\n  const response = await fetch(\"/api/v1/posts\");\n  const blog = await response.json();\n  store.dispatch(blogReplaced(blog.posts));\n  store.dispatch(screenPushed(\"blog\"));\n\n  store.dispatch(loadingFinished());\n}\n","import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport { postReplaced } from \"./actions\";\nimport { PostPushedAction, POST_PUSHED } from \"./types\";\n\nexport const postMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === POST_PUSHED) await postPushed(store, action);\n  };\n\nasync function postPushed(store: any, action: PostPushedAction) {\n  store.dispatch(loadingStarted());\n\n  const response = await fetch(\"/api/v1/posts/\" + action.postId);\n  const post = await response.json();\n  store.dispatch(postReplaced(post));\n  store.dispatch(screenPushed(\"post\"));\n\n  store.dispatch(loadingFinished());\n}\n","import { blogMiddleware } from \"./BlogScreen/middleware\";\nimport { postMiddleware } from \"./PostScreen/middleware\";\n\nexport const screensMiddlewares = [\n  //\n  blogMiddleware,\n  postMiddleware,\n];\n","import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport {\n  GameReplacedAction,\n  GAME_CREATED,\n  GAME_JOINED,\n  GAME_PLAYED,\n  GAME_REFRESHED,\n  GAME_REPLACED,\n  ROUND_ENDED,\n} from \"./types\";\nimport { getPlayerToken } from \"../player/selectors\";\nimport { gameReplaced } from \"./actions\";\nimport { playerReplaced } from \"../player/actions\";\nimport { getGame } from \"./selectors\";\nimport { gamePost } from \"./gamePost\";\n\nexport const gameMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === GAME_CREATED) {\n      await createGame(store, action);\n    }\n    if (action.type === GAME_JOINED) {\n      await joinGame(store, action);\n    }\n    if (action.type === GAME_PLAYED) {\n      await playGame(store, action);\n    }\n    if (action.type === GAME_REFRESHED) {\n      await refreshGame(store, action);\n    }\n    if (action.type === GAME_REPLACED) {\n      await replacePlayer(store, action);\n    }\n    if (action.type === ROUND_ENDED) {\n      await endRound(store);\n    }\n  };\n\nasync function createGame(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    \"/api/v1/games\",\n    { method: \"POST\", body: { ...action.form, token } },\n    store.dispatch\n  );\n  if (!result.isError) store.dispatch(screenPushed(\"player\"));\n  store.dispatch(loadingFinished());\n}\n\nasync function joinGame(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    `/api/v1/games/join`,\n    { method: \"POST\", body: { ...action.form, token } },\n    store.dispatch\n  );\n  if (!result.isError) store.dispatch(screenPushed(\"player\"));\n  store.dispatch(loadingFinished());\n}\n\nasync function playGame(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    `/api/v1/games/${action.form.gameName}/by/${action.form.creatorName}?token=${token}`,\n    { method: \"GET\" },\n    store.dispatch\n  );\n  if (!result.isError) {\n    store.dispatch(gameReplaced(result));\n    store.dispatch(screenPushed(\"game\"));\n  }\n  store.dispatch(loadingFinished());\n}\n\nasync function refreshGame(store: any, action: any) {\n  const { gameName, creatorName } = getGame(store.getState())!;\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    `/api/v1/games/${gameName}/by/${creatorName}?token=${token}`,\n    { method: \"GET\" },\n    store.dispatch\n  );\n  store.dispatch(gameReplaced(result));\n  store.dispatch(loadingFinished());\n}\n\nasync function replacePlayer(store: any, action: any) {\n  const { game } = action as GameReplacedAction;\n  store.dispatch(playerReplaced(game!.playerName, game!.token));\n}\n\nasync function endRound(store: any) {\n  const { gameName, creatorName } = getGame(store.getState())!;\n  await gamePost(\n    store,\n    `/api/v1/games/${gameName}/by/${creatorName}/endRound`,\n    {},\n    () => store.dispatch(screenPushed(\"game\"))\n  );\n}\n","import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport {\n  GAMES_BY_CREATOR_LISTED,\n  GAMES_BY_PLAYER_LISTED,\n  MY_CREATED_GAMES_LISTED,\n  MY_PLAYING_GAMES_LISTED,\n} from \"./types\";\nimport { getPlayerName, getPlayerToken } from \"../player/selectors\";\nimport {\n  gamesByCreatorListed,\n  gamesByPlayerListed,\n  gamesListReplaced,\n} from \"./actions\";\n\nexport const gamesListMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === GAMES_BY_CREATOR_LISTED) {\n      await listByCreator(store, action);\n    }\n    if (action.type === GAMES_BY_PLAYER_LISTED) {\n      await listByPlayer(store, action);\n    }\n    if (action.type === MY_CREATED_GAMES_LISTED) {\n      await listByCurrentPlayer(store);\n    }\n    if (action.type === MY_PLAYING_GAMES_LISTED) {\n      await listByCurrentPlayingPlayer(store);\n    }\n  };\n\nasync function listByCurrentPlayer(store: any) {\n  const playerName = getPlayerName(store.getState())!;\n  store.dispatch(gamesByCreatorListed(playerName));\n}\n\nasync function listByCurrentPlayingPlayer(store: any) {\n  store.dispatch(gamesByPlayerListed());\n}\n\nasync function listByCreator(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  const result = await fetchAndDispatchMessage(\n    \"/api/v1/games/byPlayer\",\n    { method: \"POST\", body: action.form },\n    store.dispatch\n  );\n  if (!result.isError) {\n    store.dispatch(gamesListReplaced(result.games));\n    store.dispatch(screenPushed(\"gamesList\"));\n  }\n  store.dispatch(loadingFinished());\n}\n\nasync function listByPlayer(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    \"/api/v1/games/byJoined\",\n    { method: \"POST\", body: { token } as any },\n    store.dispatch\n  );\n  store.dispatch(gamesListReplaced(result.games));\n  store.dispatch(screenPushed(\"gamesList\"));\n  store.dispatch(loadingFinished());\n}\n","import { AppState } from \"www/store\";\n\nexport function getMultiplayerCurrentPlayer(state: AppState) {\n  const { multiplayer } = state;\n  return multiplayer.players[multiplayer.currentPlayerIndex];\n}\n","import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport {\n  NextPlayerAddedAction,\n  NextPlayerChangedAction,\n  NEXT_PLAYER_ADDED,\n  NEXT_PLAYER_CHANGED,\n} from \"./types\";\nimport { getPlayerToken } from \"../player/selectors\";\nimport { getGame } from \"../game/selectors\";\nimport { gamePlayed, gameReplaced, gameRefreshed } from \"../game/actions\";\nimport { nextPlayerPushed } from \"./actions\";\nimport { getMultiplayerCurrentPlayer } from \"./selectors\";\nimport { playerReplaced } from \"../player/actions\";\n\nexport const multiplayerMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === NEXT_PLAYER_ADDED) {\n      await addNextPlayer(store, action);\n    }\n    if (action.type === NEXT_PLAYER_CHANGED) {\n      await changeNextPlayer(store, action);\n    }\n  };\n\nasync function addNextPlayer(store: any, action: NextPlayerAddedAction) {\n  store.dispatch(loadingStarted());\n  const state = store.getState();\n  const token = getPlayerToken(state)!;\n  const { gameName, creatorName } = getGame(state)!;\n\n  var result = await fetchAndDispatchMessage(\n    `/api/v1/games/joinNext?token=${token}`,\n    { method: \"POST\", body: { ...action.form, gameName, creatorName } as any },\n    store.dispatch\n  );\n  if (!result.isError) {\n    store.dispatch(nextPlayerPushed(creatorName, token));\n    store.dispatch(nextPlayerPushed(result.playerName, result.token));\n    store.dispatch(gameReplaced(result));\n    store.dispatch(screenPushed(\"game\"));\n  }\n  store.dispatch(loadingFinished());\n}\n\nasync function changeNextPlayer(store: any, action: NextPlayerChangedAction) {\n  const state = store.getState();\n  const next = getMultiplayerCurrentPlayer(state);\n  if (!next) {\n    store.dispatch(gameRefreshed());\n    return;\n  }\n\n  const { playerName, token } = next;\n  const { gameName, creatorName } = getGame(state)!;\n\n  store.dispatch(playerReplaced(playerName, token));\n  store.dispatch(gamePlayed(gameName, creatorName));\n  // store.dispatch(screenPushed(\"game\"));\n}\n","import { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport { Middleware } from \"redux\";\nimport { AppState, AppStore } from \"www/store\";\nimport { LOGGED_IN, SIGNED_UP } from \"./types\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport { playerReplaced } from \"./actions\";\n\nexport const playerMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === LOGGED_IN) {\n      await login(store, action);\n    }\n    if (action.type === SIGNED_UP) {\n      await signup(store, action);\n    }\n  };\n\nasync function login(store: AppStore, action: any) {\n  store.dispatch(loadingStarted());\n  var result = await fetchAndDispatchMessage(\n    \"/api/v1/players/login\",\n    { method: \"POST\", body: action.form },\n    store.dispatch\n  );\n  if (!result.isError) {\n    store.dispatch(screenPushed(\"player\"));\n    store.dispatch(playerReplaced(result.playerName, result.token));\n  }\n  store.dispatch(loadingFinished());\n}\n\nasync function signup(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  var result = await fetchAndDispatchMessage(\n    \"/api/v1/players\",\n    { method: \"POST\", body: action.form },\n    store.dispatch\n  );\n  if (!result.isError) store.dispatch(screenPushed(\"welcome\"));\n  store.dispatch(loadingFinished());\n}\n","import thunkMiddleware from \"redux-thunk\";\nimport { componentsMiddlewares } from \"www/components/middleware\";\nimport { screensMiddlewares } from \"www/screens/middleware\";\nimport { gameMiddleware } from \"./game/middleware\";\nimport { gamesListMiddleware } from \"./gamesList/middleware\";\nimport { multiplayerMiddleware } from \"./multiplayer/middleware\";\nimport { playerMiddleware } from \"./player/middleware\";\n\nexport const storeMiddlewares = [\n  thunkMiddleware,\n  ...componentsMiddlewares,\n  ...screensMiddlewares,\n  // Add other middleware after this line\n  gameMiddleware,\n  gamesListMiddleware,\n  multiplayerMiddleware,\n  playerMiddleware,\n];\n","const frozens = new WeakSet();\n\nfunction freezeState(state: any) {\n  if (!frozens.has(state)) {\n    Object.keys(state).forEach((k) => {\n      const val = state[k];\n      if (val && typeof val === \"object\") {\n        state[k] = freezeState(val);\n      }\n    });\n\n    Object.freeze(state);\n    frozens.add(state);\n  }\n  return state;\n}\n\nexport function freezeReducer(reduce: any): any {\n  return function (state: any, action: any) {\n    const nextState = reduce(state, action);\n    return freezeState(nextState);\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"../reportWebVitals\";\nimport { createAppStore } from \"./store\";\n\nconst store = createAppStore();\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { storeReducer } from \"./storeReducer\";\nimport { storeMiddlewares } from \"./storeMiddlewares\";\nimport { freezeReducer } from \"./freezeReducer\";\n\nexport function createAppStore() {\n  const store = createStore(\n    freezeReducer(storeReducer),\n    composeWithDevTools(applyMiddleware(...storeMiddlewares))\n  );\n\n  return store;\n}\n\nexport type AppStore = ReturnType<typeof createAppStore>;\nexport type AppDispatch = AppStore[\"dispatch\"];\nexport type AppActionType = Parameters<AppStore[\"dispatch\"]>[0];\nexport type AppState = ReturnType<typeof storeReducer>;\n"],"sourceRoot":""}