{"ast":null,"code":"import { NEXT_PLAYER_CHANGED, NEXT_PLAYER_PUSHED } from \"./types\";\nconst initialState = {\n  currentPlayerIndex: 0,\n  players: []\n};\nexport function multiplayerReducer(state = initialState, action) {\n  switch (action.type) {\n    case NEXT_PLAYER_CHANGED:\n      return reduceNextPlayerChanged(state, action);\n\n    case NEXT_PLAYER_PUSHED:\n      return reduceNextPlayerPushed(state, action);\n\n    default:\n      return state;\n  }\n}\n\nfunction reduceNextPlayerChanged(state, action) {\n  return { ...state,\n    currentPlayerIndex: (state.currentPlayerIndex + 1) % state.players.length\n  };\n}\n\nfunction reduceNextPlayerPushed(state, action) {\n  const {\n    players\n  } = state;\n  const newPlayers = [...players];\n  const isAlreadyPresent = players.some(p => p.playerName === action.player.playerName);\n\n  if (!isAlreadyPresent) {\n    newPlayers.push(action.player);\n  }\n\n  return { ...state,\n    players: newPlayers,\n    currentPlayerIndex: newPlayers.length - 1\n  };\n}","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG_Catan/src/www/store/multiplayer/reducers.ts"],"names":["NEXT_PLAYER_CHANGED","NEXT_PLAYER_PUSHED","initialState","currentPlayerIndex","players","multiplayerReducer","state","action","type","reduceNextPlayerChanged","reduceNextPlayerPushed","length","newPlayers","isAlreadyPresent","some","p","playerName","player","push"],"mappings":"AAAA,SAKEA,mBALF,EAMEC,kBANF,QAOO,SAPP;AASA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,kBAAkB,EAAE,CADiB;AAErCC,EAAAA,OAAO,EAAE;AAF4B,CAAvC;AAKA,OAAO,SAASC,kBAAT,CACLC,KAAuB,GAAGJ,YADrB,EAELK,MAFK,EAGL;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,mBAAL;AACE,aAAOS,uBAAuB,CAACH,KAAD,EAAQC,MAAR,CAA9B;;AACF,SAAKN,kBAAL;AACE,aAAOS,sBAAsB,CAACJ,KAAD,EAAQC,MAAR,CAA7B;;AACF;AACE,aAAOD,KAAP;AANJ;AAQD;;AAED,SAASG,uBAAT,CACEH,KADF,EAEEC,MAFF,EAGE;AACA,SAAO,EACL,GAAGD,KADE;AAELH,IAAAA,kBAAkB,EAAE,CAACG,KAAK,CAACH,kBAAN,GAA2B,CAA5B,IAAiCG,KAAK,CAACF,OAAN,CAAcO;AAF9D,GAAP;AAID;;AAED,SAASD,sBAAT,CACEJ,KADF,EAEEC,MAFF,EAGE;AACA,QAAM;AAAEH,IAAAA;AAAF,MAAcE,KAApB;AAEA,QAAMM,UAAU,GAAG,CAAC,GAAGR,OAAJ,CAAnB;AACA,QAAMS,gBAAgB,GAAGT,OAAO,CAACU,IAAR,CACtBC,CAAD,IAAOA,CAAC,CAACC,UAAF,KAAiBT,MAAM,CAACU,MAAP,CAAcD,UADf,CAAzB;;AAGA,MAAI,CAACH,gBAAL,EAAuB;AACrBD,IAAAA,UAAU,CAACM,IAAX,CAAgBX,MAAM,CAACU,MAAvB;AACD;;AAED,SAAO,EACL,GAAGX,KADE;AAELF,IAAAA,OAAO,EAAEQ,UAFJ;AAGLT,IAAAA,kBAAkB,EAAES,UAAU,CAACD,MAAX,GAAoB;AAHnC,GAAP;AAKD","sourcesContent":["import {\n  MultiplayerActionTypes,\n  MultiplayerState,\n  NextPlayerChangedAction,\n  NextPlayerPushedAction,\n  NEXT_PLAYER_CHANGED,\n  NEXT_PLAYER_PUSHED,\n} from \"./types\";\n\nconst initialState: MultiplayerState = {\n  currentPlayerIndex: 0,\n  players: [],\n};\n\nexport function multiplayerReducer(\n  state: MultiplayerState = initialState,\n  action: MultiplayerActionTypes\n) {\n  switch (action.type) {\n    case NEXT_PLAYER_CHANGED:\n      return reduceNextPlayerChanged(state, action);\n    case NEXT_PLAYER_PUSHED:\n      return reduceNextPlayerPushed(state, action);\n    default:\n      return state;\n  }\n}\n\nfunction reduceNextPlayerChanged(\n  state: MultiplayerState,\n  action: NextPlayerChangedAction\n) {\n  return {\n    ...state,\n    currentPlayerIndex: (state.currentPlayerIndex + 1) % state.players.length,\n  };\n}\n\nfunction reduceNextPlayerPushed(\n  state: MultiplayerState,\n  action: NextPlayerPushedAction\n) {\n  const { players } = state;\n\n  const newPlayers = [...players];\n  const isAlreadyPresent = players.some(\n    (p) => p.playerName === action.player.playerName\n  );\n  if (!isAlreadyPresent) {\n    newPlayers.push(action.player);\n  }\n\n  return {\n    ...state,\n    players: newPlayers,\n    currentPlayerIndex: newPlayers.length - 1,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}