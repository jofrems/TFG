{"ast":null,"code":"var _jsxFileName = \"/Users/jeff/Desktop/TFG/src/www/screens/GameScreen/HexComponent.tsx\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Hex = styled.polygon`\ncursor: pointer;\nfill-opacity: 0.4;\nstroke: #000;\nstroke-width: 1;\ntransition: transform, fill-opacity, stroke-width;\n-webkit-transition: transform, fill-opacity, stroke-width;\ntransition-duration: 1s;\n-webkit-transition-duration: 1s;;\ntransform-origin: 50% 50%;\ntransform: rotate(30deg);\n&:hover{\n  fill-opacity: 1;\n  stroke: #ff0000;\n  stroke-width: 5;\n}\n`;\n_c = Hex;\nexport function HexComponent({\n  entity\n}) {\n  var SEA = -1;\n  var DESSERT = -2;\n  var LUMBER = 0;\n  var GRAIN = 1;\n  var WOOL = 2;\n  var BRICK = 3;\n  var ORE = 4;\n  var mapSize = 7;\n  var locations = new Array(7).fill(new Array(7).fill(''));\n  ; //var rowLocations = [\"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n\n  var x = [0, 37, 112, 150, 112, 37];\n  var y = [75, 10, 10, 75, 140, 140];\n\n  for (var i = 0; i < mapSize; i++) {\n    //locations.push(rowLocations);\n    for (var j = 0; j < mapSize; i++) {\n      locations[i][j] = `${x[0]},${y[0]} ${x[1]},${y[0]} ${x[2]},${y[0]} ${x[3]},${y[0]} ${x[4]},${y[0]} ${x[5]},${y[0]}`;\n\n      for (var k = 0; k < x.length; k++) {\n        var auxX = x[k] + 30;\n        x[k] = auxX;\n      }\n    }\n\n    for (var l = 0; l < y.length; l++) {\n      var auxY = y[l] + 30;\n      y[l] = auxY;\n    }\n  } //var locations = [[0,1,2,\"0,75 37,10 112,10 150,75 112,140 37,140\",  \"30,75 67,10 142,10 180,75 142,140 67,140\",   \"60,75 97,10 172,10 210,75 172,140 97,140\",   \"0,75 37,10 112,10 150,75 112,140 37,140\"pos7]]\n\n\n  var color = \"\";\n\n  if (entity.type === \"tile\") {\n    switch (entity.TileType) {\n      case DESSERT:\n        color = \"#663300\";\n        break;\n\n      case SEA:\n        color = \"#663300\";\n        break;\n\n      case LUMBER:\n        color = \"#663300\";\n        break;\n\n      case GRAIN:\n        color = \"#663300\";\n        break;\n\n      case WOOL:\n        color = \"#663300\";\n        break;\n\n      case BRICK:\n        color = \"#663300\";\n        break;\n\n      case ORE:\n        color = \"#663300\";\n        break;\n\n      default:\n        color = \"#000000\";\n    }\n\n    console.log(entity);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    id: \"hex\",\n    children: [/*#__PURE__*/_jsxDEV(Hex, {\n      fill: color,\n      points: locations[entity.row][entity.column]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"700\",\n      y: \"700\",\n      \"text-anchor\": \"middle\",\n      children: [\" \", entity.TileWeight]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 7\n  }, this);\n}\n_c2 = HexComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Hex\");\n$RefreshReg$(_c2, \"HexComponent\");","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG/src/www/screens/GameScreen/HexComponent.tsx"],"names":["styled","Hex","polygon","HexComponent","entity","SEA","DESSERT","LUMBER","GRAIN","WOOL","BRICK","ORE","mapSize","locations","Array","fill","x","y","i","j","k","length","auxX","l","auxY","color","type","TileType","console","log","row","column","TileWeight"],"mappings":"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","sourcesContent":["import { SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from \"constants\";\nimport styled from \"styled-components\";\n\n\nconst Hex = styled.polygon`\ncursor: pointer;\nfill-opacity: 0.4;\nstroke: #000;\nstroke-width: 1;\ntransition: transform, fill-opacity, stroke-width;\n-webkit-transition: transform, fill-opacity, stroke-width;\ntransition-duration: 1s;\n-webkit-transition-duration: 1s;;\ntransform-origin: 50% 50%;\ntransform: rotate(30deg);\n&:hover{\n  fill-opacity: 1;\n  stroke: #ff0000;\n  stroke-width: 5;\n}\n`\n\n\nexport function HexComponent({ entity }: any) {\n  var SEA = -1;\n  var DESSERT = -2;\n  var LUMBER = 0;\n  var GRAIN = 1;\n  var WOOL = 2;\n  var BRICK = 3;\n  var ORE = 4;\n\n  var mapSize = 7;\n\n  var locations = new Array(7).fill(new Array(7).fill(''));;\n  //var rowLocations = [\"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n  var x = [0,37,112,150,112,37];\n  var y = [75,10,10,75,140,140];\n\n  for(var i = 0; i < mapSize; i++){\n    //locations.push(rowLocations);\n    for(var j = 0; j < mapSize; i++){\n        locations[i][j] = `${x[0]},${y[0]} ${x[1]},${y[0]} ${x[2]},${y[0]} ${x[3]},${y[0]} ${x[4]},${y[0]} ${x[5]},${y[0]}`;\n        for(var k = 0; k < x.length; k++){\n          var auxX = x[k] + 30;\n          x[k] = auxX;\n        }\n    }\n    for(var l = 0; l < y.length; l++){\n      var auxY = y[l] + 30;\n      y[l] = auxY;\n    }\n  }\n\n  //var locations = [[0,1,2,\"0,75 37,10 112,10 150,75 112,140 37,140\",  \"30,75 67,10 142,10 180,75 142,140 67,140\",   \"60,75 97,10 172,10 210,75 172,140 97,140\",   \"0,75 37,10 112,10 150,75 112,140 37,140\"pos7]]\n\n  var color = \"\";\n  if(entity.type === \"tile\"){\n      switch(entity.TileType){\n        case DESSERT:\n          color=\"#663300\";\n          break;\n        case SEA:\n          color=\"#663300\";\n          break;\n        case LUMBER:\n          color=\"#663300\";\n          break;\n        case GRAIN:\n          color=\"#663300\";\n          break;\n        case WOOL:\n          color=\"#663300\";\n          break;\n        case BRICK:\n          color=\"#663300\";\n          break;\n        case ORE:\n          color=\"#663300\";\n          break;\n        default:\n          color=\"#000000\";\n      }\n      console.log(entity);\n  };\n  return (\n      <g id=\"hex\">\n        <Hex  fill={color} points={locations[entity.row][entity.column]}></Hex>\n        <text x=\"700\" y=\"700\" text-anchor=\"middle\"> {entity.TileWeight}</text>\n      </g>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}