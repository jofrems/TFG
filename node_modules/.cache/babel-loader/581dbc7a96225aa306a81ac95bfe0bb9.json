{"ast":null,"code":"var _jsxFileName = \"/Users/jeff/Desktop/TFG/src/www/screens/GameScreen/HexComponent.tsx\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Hex = styled.polygon`\ncursor: pointer;\nfill-opacity: 0.4;\nstroke: #000;\nstroke-width: 1;\ntransition: transform, fill-opacity, stroke-width;\n-webkit-transition: transform, fill-opacity, stroke-width;\ntransition-duration: 1s;\n-webkit-transition-duration: 1s;;\ntransform-origin: 50% 50%;\n&:hover{\n  fill-opacity: 1;\n  stroke: #ff0000;\n  stroke-width: 5;\n}\n`; //transform: rotate(30deg);\n\n_c = Hex;\nexport function HexComponent({\n  entity\n}) {\n  var SEA = -1;\n  var DESSERT = -2;\n  var LUMBER = 0;\n  var GRAIN = 1;\n  var WOOL = 2;\n  var BRICK = 3;\n  var ORE = 4;\n  var mapSize = 7;\n  var locations = new Array(7).fill(new Array(7).fill(`#`));\n  console.log(`new hex`); //var rowLocations = [\"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n\n  var x = [0, 37, 112, 150, 112, 37];\n  var y = [75, 10, 10, 75, 140, 140];\n\n  for (var i = 0; i < mapSize; i++) {\n    //locations.push(rowLocations);\n    for (var j = 0; j < mapSize; j++) {\n      var auxString = `${x[0]},${y[0]} ${x[1]},${y[1]} ${x[2]},${y[2]} ${x[3]},${y[3]} ${x[4]},${y[4]} ${x[5]},${y[5]}`;\n      locations[j][i] = auxString;\n      console.log(`line ` + i + `: ` + locations[i][j]);\n\n      for (var k = 0; k < x.length; k++) {\n        var auxX = x[k] + 100;\n        x[k] = auxX;\n      }\n    }\n\n    x = [0, 37, 112, 150, 112, 37];\n\n    for (var l = 0; l < y.length; l++) {\n      var auxY = y[l] + 100;\n      y[l] = auxY;\n    }\n  }\n\n  var xJump = 100 * entity.row;\n  var yJump = 100 * entity.column;\n  var finalLoc = `${x[0] + xJump},${y[0] + yJump} ${x[1] + xJump},${y[1] + yJump} ${x[2] + xJump},${y[2] + yJump} ${x[3] + xJump},${y[3] + yJump} ${x[4] + xJump},${y[4] + yJump} ${x[5] + xJump},${y[5] + yJump}`; //var locations = [[0,1,2,\"0,75 37,10 112,10 150,75 112,140 37,140\",  \"30,75 67,10 142,10 180,75 142,140 67,140\",   \"60,75 97,10 172,10 210,75 172,140 97,140\",   \"0,75 37,10 112,10 150,75 112,140 37,140\"pos7]]\n\n  var color = \"\";\n  var locX = 0;\n  var locY = 0;\n\n  if (entity.type === \"tile\") {\n    switch (entity.TileType) {\n      case DESSERT:\n        color = \"#663300\";\n        break;\n\n      case SEA:\n        color = \"#663300\";\n        break;\n\n      case LUMBER:\n        color = \"#663300\";\n        break;\n\n      case GRAIN:\n        color = \"#663300\";\n        break;\n\n      case WOOL:\n        color = \"#663300\";\n        break;\n\n      case BRICK:\n        color = \"#663300\";\n        break;\n\n      case ORE:\n        color = \"#663300\";\n        break;\n\n      default:\n        color = \"#000000\";\n    }\n\n    locX = entity.column;\n    locY = entity.row;\n    console.log(locations);\n    console.log(`especific loc:` + locations[locX][locY]);\n    console.log(`entity row/locY: ` + entity.row + ` entity column/locX:` + entity.column);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    id: \"hex\",\n    children: [/*#__PURE__*/_jsxDEV(Hex, {\n      fill: color,\n      points: finalLoc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"700\",\n      y: \"700\",\n      children: [\" \", entity.TileWeight]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 7\n  }, this);\n}\n_c2 = HexComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Hex\");\n$RefreshReg$(_c2, \"HexComponent\");","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG/src/www/screens/GameScreen/HexComponent.tsx"],"names":["styled","Hex","polygon","HexComponent","entity","SEA","DESSERT","LUMBER","GRAIN","WOOL","BRICK","ORE","mapSize","locations","Array","fill","console","log","x","y","i","j","auxString","k","length","auxX","l","auxY","xJump","row","yJump","column","finalLoc","color","locX","locY","type","TileType","TileWeight"],"mappings":"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","sourcesContent":["import styled from \"styled-components\";\n\n\nconst Hex = styled.polygon`\ncursor: pointer;\nfill-opacity: 0.4;\nstroke: #000;\nstroke-width: 1;\ntransition: transform, fill-opacity, stroke-width;\n-webkit-transition: transform, fill-opacity, stroke-width;\ntransition-duration: 1s;\n-webkit-transition-duration: 1s;;\ntransform-origin: 50% 50%;\n&:hover{\n  fill-opacity: 1;\n  stroke: #ff0000;\n  stroke-width: 5;\n}\n`\n\n//transform: rotate(30deg);\n\n\n\nexport function HexComponent({ entity }: any) {\n  var SEA = -1;\n  var DESSERT = -2;\n  var LUMBER = 0;\n  var GRAIN = 1;\n  var WOOL = 2;\n  var BRICK = 3;\n  var ORE = 4;\n\n  var mapSize = 7;\n\n  var locations = new Array(7).fill(new Array(7).fill(`#`));\n  console.log(`new hex`);\n  \n  //var rowLocations = [\"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n  var x = [0,37,112,150,112,37];\n  var y = [75,10,10,75,140,140];\n\n\n\n  for(var i = 0; i < mapSize; i++){\n    //locations.push(rowLocations);\n    for(var j = 0; j < mapSize; j++){\n      var auxString = `${x[0]},${y[0]} ${x[1]},${y[1]} ${x[2]},${y[2]} ${x[3]},${y[3]} ${x[4]},${y[4]} ${x[5]},${y[5]}`;\n      locations[j][i] = auxString;\n\n      console.log(`line `+ i + `: `+locations[i][j]);\n\n      for(var k = 0; k < x.length; k++){\n        var auxX = x[k]+100;\n        x[k] = auxX;\n      }\n    }\n    x = [0,37,112,150,112,37];\n    for(var l = 0; l < y.length; l++){\n      var auxY = y[l] + 100;\n      y[l] = auxY;\n    }\n  }\n  var xJump = 100*entity.row;\n  var yJump = 100*entity.column;\n  var finalLoc = `${x[0]+ xJump},${y[0]+yJump} ${x[1]+xJump},${y[1]+yJump} ${x[2]+xJump},${y[2]+yJump} ${x[3]+xJump},${y[3]+yJump} ${x[4]+xJump},${y[4]+yJump} ${x[5]+xJump},${y[5]+yJump}`\n  //var locations = [[0,1,2,\"0,75 37,10 112,10 150,75 112,140 37,140\",  \"30,75 67,10 142,10 180,75 142,140 67,140\",   \"60,75 97,10 172,10 210,75 172,140 97,140\",   \"0,75 37,10 112,10 150,75 112,140 37,140\"pos7]]\n\n  var color = \"\";\n  var locX = 0;\n  var locY = 0;\n  if(entity.type === \"tile\"){\n      switch(entity.TileType){\n        case DESSERT:\n          color=\"#663300\";\n          break;\n        case SEA:\n          color=\"#663300\";\n          break;\n        case LUMBER:\n          color=\"#663300\";\n          break;\n        case GRAIN:\n          color=\"#663300\";\n          break;\n        case WOOL:\n          color=\"#663300\";\n          break;\n        case BRICK:\n          color=\"#663300\";\n          break;\n        case ORE:\n          color=\"#663300\";\n          break;\n        default:\n          color=\"#000000\";\n      }\n      \n      \n      locX = entity.column;\n      locY = entity.row;\n      \n      console.log(locations);\n      console.log(`especific loc:` +locations[locX][locY]);\n      console.log(`entity row/locY: ` +entity.row +` entity column/locX:` +entity.column);\n\n    \n  };\n  return (\n      <g id=\"hex\">\n        <Hex  fill={color} points={finalLoc}></Hex>\n        <text x=\"700\" y=\"700\"> {entity.TileWeight}</text>\n      </g>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}