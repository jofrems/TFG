{"ast":null,"code":"import { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport { loadingFinished, loadingStarted } from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport { GAMES_BY_CREATOR_LISTED, GAMES_BY_PLAYER_LISTED, MY_CREATED_GAMES_LISTED, MY_PLAYING_GAMES_LISTED } from \"./types\";\nimport { getPlayerName, getPlayerToken } from \"../player/selectors\";\nimport { gamesByCreatorListed, gamesByPlayerListed, gamesListReplaced } from \"./actions\";\nexport const gamesListMiddleware = store => next => async action => {\n  next(action);\n\n  if (action.type === GAMES_BY_CREATOR_LISTED) {\n    await listByCreator(store, action);\n  }\n\n  if (action.type === GAMES_BY_PLAYER_LISTED) {\n    await listByPlayer(store, action);\n  }\n\n  if (action.type === MY_CREATED_GAMES_LISTED) {\n    await listByCurrentPlayer(store);\n  }\n\n  if (action.type === MY_PLAYING_GAMES_LISTED) {\n    await listByCurrentPlayingPlayer(store);\n  }\n};\n\nasync function listByCurrentPlayer(store) {\n  const playerName = getPlayerName(store.getState());\n  store.dispatch(gamesByCreatorListed(playerName));\n}\n\nasync function listByCurrentPlayingPlayer(store) {\n  store.dispatch(gamesByPlayerListed());\n}\n\nasync function listByCreator(store, action) {\n  store.dispatch(loadingStarted());\n  const result = await fetchAndDispatchMessage(\"/api/v1/games/byPlayer\", {\n    method: \"POST\",\n    body: action.form\n  }, store.dispatch);\n\n  if (!result.isError) {\n    store.dispatch(gamesListReplaced(result.games));\n    store.dispatch(screenPushed(\"gamesList\"));\n  }\n\n  store.dispatch(loadingFinished());\n}\n\nasync function listByPlayer(store, action) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\"/api/v1/games/byJoined\", {\n    method: \"POST\",\n    body: {\n      token\n    }\n  }, store.dispatch);\n  store.dispatch(gamesListReplaced(result.games));\n  store.dispatch(screenPushed(\"gamesList\"));\n  store.dispatch(loadingFinished());\n}","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG/src/www/store/gamesList/middleware.ts"],"names":["fetchAndDispatchMessage","loadingFinished","loadingStarted","screenPushed","GAMES_BY_CREATOR_LISTED","GAMES_BY_PLAYER_LISTED","MY_CREATED_GAMES_LISTED","MY_PLAYING_GAMES_LISTED","getPlayerName","getPlayerToken","gamesByCreatorListed","gamesByPlayerListed","gamesListReplaced","gamesListMiddleware","store","next","action","type","listByCreator","listByPlayer","listByCurrentPlayer","listByCurrentPlayingPlayer","playerName","getState","dispatch","result","method","body","form","isError","games","token"],"mappings":"AAEA,SAASA,uBAAT,QAAwC,mDAAxC;AACA,SACEC,eADF,EAEEC,cAFF,QAGO,mCAHP;AAIA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SACEC,uBADF,EAEEC,sBAFF,EAGEC,uBAHF,EAIEC,uBAJF,QAKO,SALP;AAMA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,qBAA9C;AACA,SACEC,oBADF,EAEEC,mBAFF,EAGEC,iBAHF,QAIO,WAJP;AAMA,OAAO,MAAMC,mBAA6C,GACvDC,KAAD,IAAiBC,IAAD,IAAU,MAAOC,MAAP,IAAkB;AAC1CD,EAAAA,IAAI,CAACC,MAAD,CAAJ;;AAEA,MAAIA,MAAM,CAACC,IAAP,KAAgBb,uBAApB,EAA6C;AAC3C,UAAMc,aAAa,CAACJ,KAAD,EAAQE,MAAR,CAAnB;AACD;;AACD,MAAIA,MAAM,CAACC,IAAP,KAAgBZ,sBAApB,EAA4C;AAC1C,UAAMc,YAAY,CAACL,KAAD,EAAQE,MAAR,CAAlB;AACD;;AACD,MAAIA,MAAM,CAACC,IAAP,KAAgBX,uBAApB,EAA6C;AAC3C,UAAMc,mBAAmB,CAACN,KAAD,CAAzB;AACD;;AACD,MAAIE,MAAM,CAACC,IAAP,KAAgBV,uBAApB,EAA6C;AAC3C,UAAMc,0BAA0B,CAACP,KAAD,CAAhC;AACD;AACF,CAhBI;;AAkBP,eAAeM,mBAAf,CAAmCN,KAAnC,EAA+C;AAC7C,QAAMQ,UAAU,GAAGd,aAAa,CAACM,KAAK,CAACS,QAAN,EAAD,CAAhC;AACAT,EAAAA,KAAK,CAACU,QAAN,CAAed,oBAAoB,CAACY,UAAD,CAAnC;AACD;;AAED,eAAeD,0BAAf,CAA0CP,KAA1C,EAAsD;AACpDA,EAAAA,KAAK,CAACU,QAAN,CAAeb,mBAAmB,EAAlC;AACD;;AAED,eAAeO,aAAf,CAA6BJ,KAA7B,EAAyCE,MAAzC,EAAsD;AACpDF,EAAAA,KAAK,CAACU,QAAN,CAAetB,cAAc,EAA7B;AACA,QAAMuB,MAAM,GAAG,MAAMzB,uBAAuB,CAC1C,wBAD0C,EAE1C;AAAE0B,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,IAAI,EAAEX,MAAM,CAACY;AAA/B,GAF0C,EAG1Cd,KAAK,CAACU,QAHoC,CAA5C;;AAKA,MAAI,CAACC,MAAM,CAACI,OAAZ,EAAqB;AACnBf,IAAAA,KAAK,CAACU,QAAN,CAAeZ,iBAAiB,CAACa,MAAM,CAACK,KAAR,CAAhC;AACAhB,IAAAA,KAAK,CAACU,QAAN,CAAerB,YAAY,CAAC,WAAD,CAA3B;AACD;;AACDW,EAAAA,KAAK,CAACU,QAAN,CAAevB,eAAe,EAA9B;AACD;;AAED,eAAekB,YAAf,CAA4BL,KAA5B,EAAwCE,MAAxC,EAAqD;AACnDF,EAAAA,KAAK,CAACU,QAAN,CAAetB,cAAc,EAA7B;AACA,QAAM6B,KAAK,GAAGtB,cAAc,CAACK,KAAK,CAACS,QAAN,EAAD,CAA5B;AACA,QAAME,MAAM,GAAG,MAAMzB,uBAAuB,CAC1C,wBAD0C,EAE1C;AAAE0B,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,IAAI,EAAE;AAAEI,MAAAA;AAAF;AAAxB,GAF0C,EAG1CjB,KAAK,CAACU,QAHoC,CAA5C;AAKAV,EAAAA,KAAK,CAACU,QAAN,CAAeZ,iBAAiB,CAACa,MAAM,CAACK,KAAR,CAAhC;AACAhB,EAAAA,KAAK,CAACU,QAAN,CAAerB,YAAY,CAAC,WAAD,CAA3B;AACAW,EAAAA,KAAK,CAACU,QAAN,CAAevB,eAAe,EAA9B;AACD","sourcesContent":["import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport {\n  GAMES_BY_CREATOR_LISTED,\n  GAMES_BY_PLAYER_LISTED,\n  MY_CREATED_GAMES_LISTED,\n  MY_PLAYING_GAMES_LISTED,\n} from \"./types\";\nimport { getPlayerName, getPlayerToken } from \"../player/selectors\";\nimport {\n  gamesByCreatorListed,\n  gamesByPlayerListed,\n  gamesListReplaced,\n} from \"./actions\";\n\nexport const gamesListMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === GAMES_BY_CREATOR_LISTED) {\n      await listByCreator(store, action);\n    }\n    if (action.type === GAMES_BY_PLAYER_LISTED) {\n      await listByPlayer(store, action);\n    }\n    if (action.type === MY_CREATED_GAMES_LISTED) {\n      await listByCurrentPlayer(store);\n    }\n    if (action.type === MY_PLAYING_GAMES_LISTED) {\n      await listByCurrentPlayingPlayer(store);\n    }\n  };\n\nasync function listByCurrentPlayer(store: any) {\n  const playerName = getPlayerName(store.getState())!;\n  store.dispatch(gamesByCreatorListed(playerName));\n}\n\nasync function listByCurrentPlayingPlayer(store: any) {\n  store.dispatch(gamesByPlayerListed());\n}\n\nasync function listByCreator(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  const result = await fetchAndDispatchMessage(\n    \"/api/v1/games/byPlayer\",\n    { method: \"POST\", body: action.form },\n    store.dispatch\n  );\n  if (!result.isError) {\n    store.dispatch(gamesListReplaced(result.games));\n    store.dispatch(screenPushed(\"gamesList\"));\n  }\n  store.dispatch(loadingFinished());\n}\n\nasync function listByPlayer(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    \"/api/v1/games/byJoined\",\n    { method: \"POST\", body: { token } as any },\n    store.dispatch\n  );\n  store.dispatch(gamesListReplaced(result.games));\n  store.dispatch(screenPushed(\"gamesList\"));\n  store.dispatch(loadingFinished());\n}\n"]},"metadata":{},"sourceType":"module"}