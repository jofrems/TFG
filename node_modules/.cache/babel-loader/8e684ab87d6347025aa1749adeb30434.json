{"ast":null,"code":"import { loadingFinished, loadingStarted } from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport { postReplaced } from \"./actions\";\nimport { POST_PUSHED } from \"./types\";\nexport const postMiddleware = store => next => async action => {\n  next(action);\n  if (action.type === POST_PUSHED) await postPushed(store, action);\n};\n\nasync function postPushed(store, action) {\n  store.dispatch(loadingStarted());\n  const response = await fetch(\"/api/v1/posts/\" + action.postId);\n  const post = await response.json();\n  store.dispatch(postReplaced(post));\n  store.dispatch(screenPushed(\"post\"));\n  store.dispatch(loadingFinished());\n}","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG/src/www/screens/PostScreen/middleware.ts"],"names":["loadingFinished","loadingStarted","screenPushed","postReplaced","POST_PUSHED","postMiddleware","store","next","action","type","postPushed","dispatch","response","fetch","postId","post","json"],"mappings":"AAEA,SACEA,eADF,EAEEC,cAFF,QAGO,mCAHP;AAIA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAA2BC,WAA3B,QAA8C,SAA9C;AAEA,OAAO,MAAMC,cAAwC,GAClDC,KAAD,IAAiBC,IAAD,IAAU,MAAOC,MAAP,IAAkB;AAC1CD,EAAAA,IAAI,CAACC,MAAD,CAAJ;AAEA,MAAIA,MAAM,CAACC,IAAP,KAAgBL,WAApB,EAAiC,MAAMM,UAAU,CAACJ,KAAD,EAAQE,MAAR,CAAhB;AAClC,CALI;;AAOP,eAAeE,UAAf,CAA0BJ,KAA1B,EAAsCE,MAAtC,EAAgE;AAC9DF,EAAAA,KAAK,CAACK,QAAN,CAAeV,cAAc,EAA7B;AAEA,QAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmBL,MAAM,CAACM,MAA3B,CAA5B;AACA,QAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAV,EAAAA,KAAK,CAACK,QAAN,CAAeR,YAAY,CAACY,IAAD,CAA3B;AACAT,EAAAA,KAAK,CAACK,QAAN,CAAeT,YAAY,CAAC,MAAD,CAA3B;AAEAI,EAAAA,KAAK,CAACK,QAAN,CAAeX,eAAe,EAA9B;AACD","sourcesContent":["import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport { postReplaced } from \"./actions\";\nimport { PostPushedAction, POST_PUSHED } from \"./types\";\n\nexport const postMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === POST_PUSHED) await postPushed(store, action);\n  };\n\nasync function postPushed(store: any, action: PostPushedAction) {\n  store.dispatch(loadingStarted());\n\n  const response = await fetch(\"/api/v1/posts/\" + action.postId);\n  const post = await response.json();\n  store.dispatch(postReplaced(post));\n  store.dispatch(screenPushed(\"post\"));\n\n  store.dispatch(loadingFinished());\n}\n"]},"metadata":{},"sourceType":"module"}