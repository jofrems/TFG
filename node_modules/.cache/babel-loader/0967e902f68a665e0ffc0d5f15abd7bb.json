{"ast":null,"code":"import _toConsumableArray from\"/Users/jeff/Desktop/TFG/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{useCallback,useRef}from\"react\";import{useDispatch,useSelector}from\"react-redux\";// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport var useAppDispatch=function useAppDispatch(){return useDispatch();};export var useAppSelector=useSelector;export var useInputRef=function useInputRef(){return useRef(null);};export var useDispatchForm=function useDispatchForm(actionCreator){for(var _len=arguments.length,refs=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){refs[_key-1]=arguments[_key];}var dispatch=useAppDispatch();return useCallback(function(){var values=refs.map(function(ref){var _ref$current;return typeof ref===\"string\"?ref:(_ref$current=ref.current)===null||_ref$current===void 0?void 0:_ref$current.value;});dispatch(actionCreator.apply(void 0,_toConsumableArray(values)));// eslint-disable-next-line react-hooks/exhaustive-deps\n},[dispatch,actionCreator].concat(refs));};export var useDispatchFormBig=function useDispatchFormBig(actionCreator){for(var _len2=arguments.length,refs=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){refs[_key2-1]=arguments[_key2];}var dispatch=useAppDispatch();return useCallback(function(){var values=refs.map(function(ref){return ref;});dispatch(actionCreator.apply(void 0,_toConsumableArray(values)));// eslint-disable-next-line react-hooks/exhaustive-deps\n},[dispatch,actionCreator].concat(refs));};","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG/src/www/store/hooks.ts"],"names":["useCallback","useRef","useDispatch","useSelector","useAppDispatch","useAppSelector","useInputRef","useDispatchForm","actionCreator","refs","dispatch","values","map","ref","current","value","useDispatchFormBig"],"mappings":"sJAAA,OAA2BA,WAA3B,CAAwCC,MAAxC,KAAsD,OAAtD,CACA,OAA+BC,WAA/B,CAA4CC,WAA5C,KAA+D,aAA/D,CAGA;AACA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,SAAMF,CAAAA,WAAW,EAAjB,EAAvB,CACP,MAAO,IAAMG,CAAAA,cAA8C,CAAGF,WAAvD,CAEP,MAAO,IAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,SAAML,CAAAA,MAAM,CAA0B,IAA1B,CAAZ,EAApB,CACP,MAAO,IAAMM,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAC7BC,aAD6B,CAG1B,+BADAC,IACA,qDADAA,IACA,0BACH,GAAIC,CAAAA,QAAQ,CAAGN,cAAc,EAA7B,CACA,MAAOJ,CAAAA,WAAW,CAAC,UAAM,CACvB,GAAMW,CAAAA,MAAM,CAAGF,IAAI,CAACG,GAAL,CAAS,SAACC,GAAD,yBACtB,OAAOA,CAAAA,GAAP,GAAe,QAAf,CAA0BA,GAA1B,eAAgCA,GAAG,CAACC,OAApC,uCAAgC,aAAaC,KADvB,EAAT,CAAf,CAGAL,QAAQ,CAACF,aAAa,MAAb,2BAAiBG,MAAjB,EAAD,CAAR,CACA;AACD,CANiB,EAMdD,QANc,CAMJF,aANI,SAMcC,IANd,EAAlB,CAOD,CAZM,CAcP,MAAO,IAAMO,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAChCR,aADgC,CAG7B,gCADAC,IACA,2DADAA,IACA,4BACH,GAAIC,CAAAA,QAAQ,CAAGN,cAAc,EAA7B,CACA,MAAOJ,CAAAA,WAAW,CAAC,UAAM,CACvB,GAAMW,CAAAA,MAAM,CAAGF,IAAI,CAACG,GAAL,CAAS,SAACC,GAAD,QAASA,CAAAA,GAAT,EAAT,CAAf,CACAH,QAAQ,CAACF,aAAa,MAAb,2BAAiBG,MAAjB,EAAD,CAAR,CACA;AACD,CAJiB,EAIdD,QAJc,CAIJF,aAJI,SAIcC,IAJd,EAAlB,CAKD,CAVM","sourcesContent":["import { MutableRefObject, useCallback, useRef } from \"react\";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { AppState, AppDispatch } from \"./\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\n\nexport const useInputRef = () => useRef<null | HTMLInputElement>(null);\nexport const useDispatchForm = (\n  actionCreator: Function,\n  ...refs: (string | MutableRefObject<null | HTMLInputElement>)[]\n) => {\n  var dispatch = useAppDispatch();\n  return useCallback(() => {\n    const values = refs.map((ref) =>\n      typeof ref === \"string\" ? ref : ref.current?.value\n    );\n    dispatch(actionCreator(...values));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, actionCreator, ...refs]);\n};\n\nexport const useDispatchFormBig = (\n  actionCreator: Function,\n  ...refs: (string | undefined)[]\n) => {\n  var dispatch = useAppDispatch();\n  return useCallback(() => {\n    const values = refs.map((ref) => ref);\n    dispatch(actionCreator(...values));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, actionCreator, ...refs]);\n};\n"]},"metadata":{},"sourceType":"module"}