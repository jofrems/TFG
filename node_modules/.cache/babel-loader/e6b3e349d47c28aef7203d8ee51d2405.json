{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => {\n  _s();\n\n  return useDispatch();\n};\n\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\n\nexport const useAppSelector = useSelector;\nexport const useInputRef = () => {\n  _s2();\n\n  return useRef(null);\n};\n\n_s2(useInputRef, \"J9pzIsEOVEZ74gjFtMkCj+5Po7s=\");\n\nexport const useDispatchForm = function (actionCreator) {\n  _s3();\n\n  for (var _len = arguments.length, refs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    refs[_key - 1] = arguments[_key];\n  }\n\n  var dispatch = useAppDispatch();\n  return useCallback(() => {\n    const values = refs.map(ref => {\n      var _ref$current;\n\n      return typeof ref === \"string\" ? ref : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.value;\n    });\n    dispatch(actionCreator(...values)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, actionCreator, ...refs]);\n};\n\n_s3(useDispatchForm, \"OqBVLt6aN3sywE9xSMcloJ9SYsA=\", false, function () {\n  return [useAppDispatch];\n});","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG/src/www/store/hooks.ts"],"names":["useCallback","useRef","useDispatch","useSelector","useAppDispatch","useAppSelector","useInputRef","useDispatchForm","actionCreator","refs","dispatch","values","map","ref","current","value"],"mappings":";;;;AAAA,SAA2BA,WAA3B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,SAA+BC,WAA/B,EAA4CC,WAA5C,QAA+D,aAA/D;AAGA;AACA,OAAO,MAAMC,cAAc,GAAG;AAAA;;AAAA,SAAMF,WAAW,EAAjB;AAAA,CAAvB;;GAAME,c;UAAuBF,W;;;AACpC,OAAO,MAAMG,cAA8C,GAAGF,WAAvD;AAEP,OAAO,MAAMG,WAAW,GAAG;AAAA;;AAAA,SAAML,MAAM,CAA0B,IAA1B,CAAZ;AAAA,CAApB;;IAAMK,W;;AACb,OAAO,MAAMC,eAAe,GAAG,UAC7BC,aAD6B,EAG1B;AAAA;;AAAA,oCADAC,IACA;AADAA,IAAAA,IACA;AAAA;;AACH,MAAIC,QAAQ,GAAGN,cAAc,EAA7B;AACA,SAAOJ,WAAW,CAAC,MAAM;AACvB,UAAMW,MAAM,GAAGF,IAAI,CAACG,GAAL,CAAUC,GAAD;AAAA;;AAAA,aACtB,OAAOA,GAAP,KAAe,QAAf,GAA0BA,GAA1B,mBAAgCA,GAAG,CAACC,OAApC,iDAAgC,aAAaC,KADvB;AAAA,KAAT,CAAf;AAGAL,IAAAA,QAAQ,CAACF,aAAa,CAAC,GAAGG,MAAJ,CAAd,CAAR,CAJuB,CAKvB;AACD,GANiB,EAMf,CAACD,QAAD,EAAWF,aAAX,EAA0B,GAAGC,IAA7B,CANe,CAAlB;AAOD,CAZM;;IAAMF,e;UAIIH,c","sourcesContent":["import { MutableRefObject, useCallback, useRef } from \"react\";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { AppState, AppDispatch } from \"./\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\n\nexport const useInputRef = () => useRef<null | HTMLInputElement>(null);\nexport const useDispatchForm = (\n  actionCreator: Function,\n  ...refs: (string | MutableRefObject<null | HTMLInputElement>)[]\n) => {\n  var dispatch = useAppDispatch();\n  return useCallback(() => {\n    const values = refs.map((ref) =>\n      typeof ref === \"string\" ? ref : ref.current?.value\n    );\n    dispatch(actionCreator(...values));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, actionCreator, ...refs]);\n};\n"]},"metadata":{},"sourceType":"module"}