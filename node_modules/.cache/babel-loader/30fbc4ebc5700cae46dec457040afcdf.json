{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jeff/Desktop/TFG/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/jeff/Desktop/TFG/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/jeff/Desktop/TFG/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{messageShown}from\"./actions\";export function fetchAndDispatchMessage(_x,_x2,_x3){return _fetchAndDispatchMessage.apply(this,arguments);}function _fetchAndDispatchMessage(){_fetchAndDispatchMessage=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url,options,dispatch){var newOptions,response,body;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newOptions=_objectSpread(_objectSpread({},options),{},{body:JSON.stringify(options===null||options===void 0?void 0:options.body),headers:{\"Content-Type\":\"application/json\"}});_context.next=3;return fetch(url,newOptions);case 3:response=_context.sent;_context.next=6;return response.json();case 6:body=_context.sent;if(typeof body.message===\"string\"){dispatch(messageShown(body.message,body.isError));}return _context.abrupt(\"return\",body);case 9:case\"end\":return _context.stop();}}},_callee);}));return _fetchAndDispatchMessage.apply(this,arguments);}","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG/src/www/widgets/MessageWidget/fetchAndDispatchMessage.ts"],"names":["messageShown","fetchAndDispatchMessage","url","options","dispatch","newOptions","body","JSON","stringify","headers","fetch","response","json","message","isError"],"mappings":"saACA,OAASA,YAAT,KAA6B,WAA7B,CAEA,eAAsBC,CAAAA,uBAAtB,oE,qHAAO,iBACLC,GADK,CAELC,OAFK,CAGLC,QAHK,+IAKCC,UALD,gCAMAF,OANA,MAOHG,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf,SAAeA,OAAf,iBAAeA,OAAO,CAAEG,IAAxB,CAPH,CAQHG,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CARN,yBAUkBC,CAAAA,KAAK,CAACR,GAAD,CAAMG,UAAN,CAVvB,QAUCM,QAVD,qCAYcA,CAAAA,QAAQ,CAACC,IAAT,EAZd,QAYCN,IAZD,eAaL,GAAI,MAAOA,CAAAA,IAAI,CAACO,OAAZ,GAAwB,QAA5B,CAAsC,CACpCT,QAAQ,CAACJ,YAAY,CAACM,IAAI,CAACO,OAAN,CAAeP,IAAI,CAACQ,OAApB,CAAb,CAAR,CACD,CAfI,gCAiBER,IAjBF,wD","sourcesContent":["import { AppDispatch } from \"www/store\";\nimport { messageShown } from \"./actions\";\n\nexport async function fetchAndDispatchMessage(\n  url: Parameters<typeof fetch>[0],\n  options: Parameters<typeof fetch>[1],\n  dispatch: AppDispatch\n): Promise<any> {\n  const newOptions = {\n    ...options,\n    body: JSON.stringify(options?.body),\n    headers: { \"Content-Type\": \"application/json\" },\n  };\n  const response = await fetch(url, newOptions);\n\n  const body = await response.json();\n  if (typeof body.message === \"string\") {\n    dispatch(messageShown(body.message, body.isError));\n  }\n\n  return body;\n}\n\n"]},"metadata":{},"sourceType":"module"}