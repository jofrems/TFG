{"ast":null,"code":"import _objectSpread from\"/Users/jeff/Desktop/TFG/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/jeff/Desktop/TFG/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jeff/Desktop/TFG/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{fetchAndDispatchMessage}from\"www/widgets/MessageWidget/fetchAndDispatchMessage\";import{loadingFinished,loadingStarted}from\"www/widgets/LoadingWidget/actions\";import{screenPushed}from\"www/widgets/ScreenStackWidget/actions\";import{NEXT_PLAYER_ADDED,NEXT_PLAYER_CHANGED}from\"./types\";import{getPlayerToken}from\"../player/selectors\";import{getGame}from\"../game/selectors\";import{gamePlayed,gameReplaced,gameRefreshed}from\"../game/actions\";import{nextPlayerPushed}from\"./actions\";import{getMultiplayerCurrentPlayer}from\"./selectors\";import{playerReplaced}from\"../player/actions\";export var multiplayerMiddleware=function multiplayerMiddleware(store){return function(next){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(action){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:next(action);if(!(action.type===NEXT_PLAYER_ADDED)){_context.next=4;break;}_context.next=4;return addNextPlayer(store,action);case 4:if(!(action.type===NEXT_PLAYER_CHANGED)){_context.next=7;break;}_context.next=7;return changeNextPlayer(store,action);case 7:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};};function addNextPlayer(_x2,_x3){return _addNextPlayer.apply(this,arguments);}function _addNextPlayer(){_addNextPlayer=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(store,action){var state,token,_ref2,gameName,creatorName,result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:store.dispatch(loadingStarted());state=store.getState();token=getPlayerToken(state);_ref2=getGame(state),gameName=_ref2.gameName,creatorName=_ref2.creatorName;_context2.next=6;return fetchAndDispatchMessage(\"/api/v1/games/joinNext?token=\".concat(token),{method:\"POST\",body:_objectSpread(_objectSpread({},action.form),{},{gameName:gameName,creatorName:creatorName})},store.dispatch);case 6:result=_context2.sent;if(!result.isError){store.dispatch(nextPlayerPushed(creatorName,token));store.dispatch(nextPlayerPushed(result.playerName,result.token));store.dispatch(gameReplaced(result));store.dispatch(screenPushed(\"game\"));}store.dispatch(loadingFinished());case 9:case\"end\":return _context2.stop();}}},_callee2);}));return _addNextPlayer.apply(this,arguments);}function changeNextPlayer(_x4,_x5){return _changeNextPlayer.apply(this,arguments);}function _changeNextPlayer(){_changeNextPlayer=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(store,action){var state,next,playerName,token,_ref3,gameName,creatorName;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:state=store.getState();next=getMultiplayerCurrentPlayer(state);if(next){_context3.next=5;break;}store.dispatch(gameRefreshed());return _context3.abrupt(\"return\");case 5:playerName=next.playerName,token=next.token;_ref3=getGame(state),gameName=_ref3.gameName,creatorName=_ref3.creatorName;store.dispatch(playerReplaced(playerName,token));store.dispatch(gamePlayed(gameName,creatorName));// store.dispatch(screenPushed(\"game\"));\ncase 9:case\"end\":return _context3.stop();}}},_callee3);}));return _changeNextPlayer.apply(this,arguments);}","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG/src/www/store/multiplayer/middleware.ts"],"names":["fetchAndDispatchMessage","loadingFinished","loadingStarted","screenPushed","NEXT_PLAYER_ADDED","NEXT_PLAYER_CHANGED","getPlayerToken","getGame","gamePlayed","gameReplaced","gameRefreshed","nextPlayerPushed","getMultiplayerCurrentPlayer","playerReplaced","multiplayerMiddleware","store","next","action","type","addNextPlayer","changeNextPlayer","dispatch","state","getState","token","gameName","creatorName","method","body","form","result","isError","playerName"],"mappings":"saAEA,OAASA,uBAAT,KAAwC,mDAAxC,CACA,OACEC,eADF,CAEEC,cAFF,KAGO,mCAHP,CAIA,OAASC,YAAT,KAA6B,uCAA7B,CACA,OAGEC,iBAHF,CAIEC,mBAJF,KAKO,SALP,CAMA,OAASC,cAAT,KAA+B,qBAA/B,CACA,OAASC,OAAT,KAAwB,mBAAxB,CACA,OAASC,UAAT,CAAqBC,YAArB,CAAmCC,aAAnC,KAAwD,iBAAxD,CACA,OAASC,gBAAT,KAAiC,WAAjC,CACA,OAASC,2BAAT,KAA4C,aAA5C,CACA,OAASC,cAAT,KAA+B,mBAA/B,CAEA,MAAO,IAAMC,CAAAA,qBAA+C,CAC1D,QADWA,CAAAA,qBACX,CAACC,KAAD,QAAgB,UAACC,IAAD,iGAAU,iBAAOC,MAAP,kHACxBD,IAAI,CAACC,MAAD,CAAJ,CADwB,KAGpBA,MAAM,CAACC,IAAP,GAAgBd,iBAHI,gDAIhBe,CAAAA,aAAa,CAACJ,KAAD,CAAQE,MAAR,CAJG,aAMpBA,MAAM,CAACC,IAAP,GAAgBb,mBANI,gDAOhBe,CAAAA,gBAAgB,CAACL,KAAD,CAAQE,MAAR,CAPA,uDAAV,gEAAhB,EADK,C,QAYQE,CAAAA,a,wJAAf,kBAA6BJ,KAA7B,CAAyCE,MAAzC,wKACEF,KAAK,CAACM,QAAN,CAAenB,cAAc,EAA7B,EACMoB,KAFR,CAEgBP,KAAK,CAACQ,QAAN,EAFhB,CAGQC,KAHR,CAGgBlB,cAAc,CAACgB,KAAD,CAH9B,OAIoCf,OAAO,CAACe,KAAD,CAJ3C,CAIUG,QAJV,OAIUA,QAJV,CAIoBC,WAJpB,OAIoBA,WAJpB,wBAMqB1B,CAAAA,uBAAuB,wCACRwB,KADQ,EAExC,CAAEG,MAAM,CAAE,MAAV,CAAkBC,IAAI,gCAAOX,MAAM,CAACY,IAAd,MAAoBJ,QAAQ,CAARA,QAApB,CAA8BC,WAAW,CAAXA,WAA9B,EAAtB,CAFwC,CAGxCX,KAAK,CAACM,QAHkC,CAN5C,QAMMS,MANN,gBAWE,GAAI,CAACA,MAAM,CAACC,OAAZ,CAAqB,CACnBhB,KAAK,CAACM,QAAN,CAAeV,gBAAgB,CAACe,WAAD,CAAcF,KAAd,CAA/B,EACAT,KAAK,CAACM,QAAN,CAAeV,gBAAgB,CAACmB,MAAM,CAACE,UAAR,CAAoBF,MAAM,CAACN,KAA3B,CAA/B,EACAT,KAAK,CAACM,QAAN,CAAeZ,YAAY,CAACqB,MAAD,CAA3B,EACAf,KAAK,CAACM,QAAN,CAAelB,YAAY,CAAC,MAAD,CAA3B,EACD,CACDY,KAAK,CAACM,QAAN,CAAepB,eAAe,EAA9B,EAjBF,wD,wDAoBemB,CAAAA,gB,iKAAf,kBAAgCL,KAAhC,CAA4CE,MAA5C,iLACQK,KADR,CACgBP,KAAK,CAACQ,QAAN,EADhB,CAEQP,IAFR,CAEeJ,2BAA2B,CAACU,KAAD,CAF1C,IAGON,IAHP,0BAIID,KAAK,CAACM,QAAN,CAAeX,aAAa,EAA5B,EAJJ,yCAQUsB,UARV,CAQgChB,IARhC,CAQUgB,UARV,CAQsBR,KARtB,CAQgCR,IARhC,CAQsBQ,KARtB,OASoCjB,OAAO,CAACe,KAAD,CAT3C,CASUG,QATV,OASUA,QATV,CASoBC,WATpB,OASoBA,WATpB,CAWEX,KAAK,CAACM,QAAN,CAAeR,cAAc,CAACmB,UAAD,CAAaR,KAAb,CAA7B,EACAT,KAAK,CAACM,QAAN,CAAeb,UAAU,CAACiB,QAAD,CAAWC,WAAX,CAAzB,EACA;AAbF,wD","sourcesContent":["import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport {\n  NextPlayerAddedAction,\n  NextPlayerChangedAction,\n  NEXT_PLAYER_ADDED,\n  NEXT_PLAYER_CHANGED,\n} from \"./types\";\nimport { getPlayerToken } from \"../player/selectors\";\nimport { getGame } from \"../game/selectors\";\nimport { gamePlayed, gameReplaced, gameRefreshed } from \"../game/actions\";\nimport { nextPlayerPushed } from \"./actions\";\nimport { getMultiplayerCurrentPlayer } from \"./selectors\";\nimport { playerReplaced } from \"../player/actions\";\n\nexport const multiplayerMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === NEXT_PLAYER_ADDED) {\n      await addNextPlayer(store, action);\n    }\n    if (action.type === NEXT_PLAYER_CHANGED) {\n      await changeNextPlayer(store, action);\n    }\n  };\n\nasync function addNextPlayer(store: any, action: NextPlayerAddedAction) {\n  store.dispatch(loadingStarted());\n  const state = store.getState();\n  const token = getPlayerToken(state)!;\n  const { gameName, creatorName } = getGame(state)!;\n\n  var result = await fetchAndDispatchMessage(\n    `/api/v1/games/joinNext?token=${token}`,\n    { method: \"POST\", body: { ...action.form, gameName, creatorName } as any },\n    store.dispatch\n  );\n  if (!result.isError) {\n    store.dispatch(nextPlayerPushed(creatorName, token));\n    store.dispatch(nextPlayerPushed(result.playerName, result.token));\n    store.dispatch(gameReplaced(result));\n    store.dispatch(screenPushed(\"game\"));\n  }\n  store.dispatch(loadingFinished());\n}\n\nasync function changeNextPlayer(store: any, action: NextPlayerChangedAction) {\n  const state = store.getState();\n  const next = getMultiplayerCurrentPlayer(state);\n  if (!next) {\n    store.dispatch(gameRefreshed());\n    return;\n  }\n\n  const { playerName, token } = next;\n  const { gameName, creatorName } = getGame(state)!;\n\n  store.dispatch(playerReplaced(playerName, token));\n  store.dispatch(gamePlayed(gameName, creatorName));\n  // store.dispatch(screenPushed(\"game\"));\n}\n"]},"metadata":{},"sourceType":"module"}