{"ast":null,"code":"import { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport { loadingFinished, loadingStarted } from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport { NEXT_PLAYER_ADDED, NEXT_PLAYER_CHANGED } from \"./types\";\nimport { getPlayerToken } from \"../player/selectors\";\nimport { getGame } from \"../game/selectors\";\nimport { gamePlayed, gameReplaced, gameRefreshed } from \"../game/actions\";\nimport { nextPlayerPushed } from \"./actions\";\nimport { getMultiplayerCurrentPlayer } from \"./selectors\";\nimport { playerReplaced } from \"../player/actions\";\nexport const multiplayerMiddleware = store => next => async action => {\n  next(action);\n\n  if (action.type === NEXT_PLAYER_ADDED) {\n    await addNextPlayer(store, action);\n  }\n\n  if (action.type === NEXT_PLAYER_CHANGED) {\n    await changeNextPlayer(store, action);\n  }\n};\n\nasync function addNextPlayer(store, action) {\n  store.dispatch(loadingStarted());\n  const state = store.getState();\n  const token = getPlayerToken(state);\n  const {\n    gameName,\n    creatorName\n  } = getGame(state);\n  var result = await fetchAndDispatchMessage(`/api/v1/games/joinNext?token=${token}`, {\n    method: \"POST\",\n    body: { ...action.form,\n      gameName,\n      creatorName\n    }\n  }, store.dispatch);\n\n  if (!result.isError) {\n    store.dispatch(nextPlayerPushed(creatorName, token));\n    store.dispatch(nextPlayerPushed(result.playerName, result.token));\n    store.dispatch(gameReplaced(result));\n    store.dispatch(screenPushed(\"game\"));\n  }\n\n  store.dispatch(loadingFinished());\n}\n\nasync function changeNextPlayer(store, action) {\n  const state = store.getState();\n  const next = getMultiplayerCurrentPlayer(state);\n\n  if (!next) {\n    store.dispatch(gameRefreshed());\n    return;\n  }\n\n  const {\n    playerName,\n    token\n  } = next;\n  const {\n    gameName,\n    creatorName\n  } = getGame(state);\n  store.dispatch(playerReplaced(playerName, token));\n  store.dispatch(gamePlayed(gameName, creatorName)); // store.dispatch(screenPushed(\"game\"));\n}","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG_Catan/src/www/store/multiplayer/middleware.ts"],"names":["fetchAndDispatchMessage","loadingFinished","loadingStarted","screenPushed","NEXT_PLAYER_ADDED","NEXT_PLAYER_CHANGED","getPlayerToken","getGame","gamePlayed","gameReplaced","gameRefreshed","nextPlayerPushed","getMultiplayerCurrentPlayer","playerReplaced","multiplayerMiddleware","store","next","action","type","addNextPlayer","changeNextPlayer","dispatch","state","getState","token","gameName","creatorName","result","method","body","form","isError","playerName"],"mappings":"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","sourcesContent":["import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport {\n  NextPlayerAddedAction,\n  NextPlayerChangedAction,\n  NEXT_PLAYER_ADDED,\n  NEXT_PLAYER_CHANGED,\n} from \"./types\";\nimport { getPlayerToken } from \"../player/selectors\";\nimport { getGame } from \"../game/selectors\";\nimport { gamePlayed, gameReplaced, gameRefreshed } from \"../game/actions\";\nimport { nextPlayerPushed } from \"./actions\";\nimport { getMultiplayerCurrentPlayer } from \"./selectors\";\nimport { playerReplaced } from \"../player/actions\";\n\nexport const multiplayerMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === NEXT_PLAYER_ADDED) {\n      await addNextPlayer(store, action);\n    }\n    if (action.type === NEXT_PLAYER_CHANGED) {\n      await changeNextPlayer(store, action);\n    }\n  };\n\nasync function addNextPlayer(store: any, action: NextPlayerAddedAction) {\n  store.dispatch(loadingStarted());\n  const state = store.getState();\n  const token = getPlayerToken(state)!;\n  const { gameName, creatorName } = getGame(state)!;\n\n  var result = await fetchAndDispatchMessage(\n    `/api/v1/games/joinNext?token=${token}`,\n    { method: \"POST\", body: { ...action.form, gameName, creatorName } as any },\n    store.dispatch\n  );\n  if (!result.isError) {\n    store.dispatch(nextPlayerPushed(creatorName, token));\n    store.dispatch(nextPlayerPushed(result.playerName, result.token));\n    store.dispatch(gameReplaced(result));\n    store.dispatch(screenPushed(\"game\"));\n  }\n  store.dispatch(loadingFinished());\n}\n\nasync function changeNextPlayer(store: any, action: NextPlayerChangedAction) {\n  const state = store.getState();\n  const next = getMultiplayerCurrentPlayer(state);\n  if (!next) {\n    store.dispatch(gameRefreshed());\n    return;\n  }\n\n  const { playerName, token } = next;\n  const { gameName, creatorName } = getGame(state)!;\n\n  store.dispatch(playerReplaced(playerName, token));\n  store.dispatch(gamePlayed(gameName, creatorName));\n  // store.dispatch(screenPushed(\"game\"));\n}\n"]},"metadata":{},"sourceType":"module"}