{"ast":null,"code":"import { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport { loadingFinished, loadingStarted } from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport { GAME_CREATED, GAME_JOINED, GAME_PLAYED, GAME_REFRESHED, GAME_REPLACED, ROUND_ENDED } from \"./types\";\nimport { getPlayerToken } from \"../player/selectors\";\nimport { gameReplaced } from \"./actions\";\nimport { playerReplaced } from \"../player/actions\";\nimport { getGame } from \"./selectors\";\nimport { gamePost } from \"./gamePost\";\nexport const gameMiddleware = store => next => async action => {\n  next(action);\n\n  if (action.type === GAME_CREATED) {\n    await createGame(store, action);\n  }\n\n  if (action.type === GAME_JOINED) {\n    await joinGame(store, action);\n  }\n\n  if (action.type === GAME_PLAYED) {\n    await playGame(store, action);\n  }\n\n  if (action.type === GAME_REFRESHED) {\n    await refreshGame(store, action);\n  }\n\n  if (action.type === GAME_REPLACED) {\n    await replacePlayer(store, action);\n  }\n\n  if (action.type === ROUND_ENDED) {\n    await endRound(store);\n  }\n};\n\nasync function createGame(store, action) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\"/api/v1/games\", {\n    method: \"POST\",\n    body: { ...action.form,\n      token\n    }\n  }, store.dispatch);\n  if (!result.isError) store.dispatch(screenPushed(\"player\"));\n  store.dispatch(loadingFinished());\n}\n\nasync function joinGame(store, action) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(`/api/v1/games/join`, {\n    method: \"POST\",\n    body: { ...action.form,\n      token\n    }\n  }, store.dispatch);\n  if (!result.isError) store.dispatch(screenPushed(\"player\"));\n  store.dispatch(loadingFinished());\n}\n\nasync function playGame(store, action) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(`/api/v1/games/${action.form.gameName}/by/${action.form.creatorName}?token=${token}`, {\n    method: \"GET\"\n  }, store.dispatch);\n\n  if (!result.isError) {\n    store.dispatch(gameReplaced(result));\n    store.dispatch(screenPushed(\"game\"));\n  }\n\n  store.dispatch(loadingFinished());\n}\n\nasync function refreshGame(store, action) {\n  const {\n    gameName,\n    creatorName\n  } = getGame(store.getState());\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(`/api/v1/games/${gameName}/by/${creatorName}?token=${token}`, {\n    method: \"GET\"\n  }, store.dispatch);\n  store.dispatch(gameReplaced(result));\n  store.dispatch(loadingFinished());\n}\n\nasync function replacePlayer(store, action) {\n  const {\n    game\n  } = action;\n  store.dispatch(playerReplaced(game.playerName, game.token));\n}\n\nasync function endRound(store) {\n  const {\n    gameName,\n    creatorName\n  } = getGame(store.getState());\n  await gamePost(store, `/api/v1/games/${gameName}/by/${creatorName}/endRound`, {}, () => store.dispatch(screenPushed(\"game\")));\n}","map":{"version":3,"sources":["/Users/jeff/Desktop/TFG/src/www/store/game/middleware.ts"],"names":["fetchAndDispatchMessage","loadingFinished","loadingStarted","screenPushed","GAME_CREATED","GAME_JOINED","GAME_PLAYED","GAME_REFRESHED","GAME_REPLACED","ROUND_ENDED","getPlayerToken","gameReplaced","playerReplaced","getGame","gamePost","gameMiddleware","store","next","action","type","createGame","joinGame","playGame","refreshGame","replacePlayer","endRound","dispatch","token","getState","result","method","body","form","isError","gameName","creatorName","game","playerName"],"mappings":"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","sourcesContent":["import { Middleware } from \"redux\";\nimport { AppState } from \"www/store\";\nimport { fetchAndDispatchMessage } from \"www/widgets/MessageWidget/fetchAndDispatchMessage\";\nimport {\n  loadingFinished,\n  loadingStarted,\n} from \"www/widgets/LoadingWidget/actions\";\nimport { screenPushed } from \"www/widgets/ScreenStackWidget/actions\";\nimport {\n  GameReplacedAction,\n  GAME_CREATED,\n  GAME_JOINED,\n  GAME_PLAYED,\n  GAME_REFRESHED,\n  GAME_REPLACED,\n  ROUND_ENDED,\n} from \"./types\";\nimport { getPlayerToken } from \"../player/selectors\";\nimport { gameReplaced } from \"./actions\";\nimport { playerReplaced } from \"../player/actions\";\nimport { getGame } from \"./selectors\";\nimport { gamePost } from \"./gamePost\";\n\nexport const gameMiddleware: Middleware<{}, AppState> =\n  (store: any) => (next) => async (action) => {\n    next(action);\n\n    if (action.type === GAME_CREATED) {\n      await createGame(store, action);\n    }\n    if (action.type === GAME_JOINED) {\n      await joinGame(store, action);\n    }\n    if (action.type === GAME_PLAYED) {\n      await playGame(store, action);\n    }\n    if (action.type === GAME_REFRESHED) {\n      await refreshGame(store, action);\n    }\n    if (action.type === GAME_REPLACED) {\n      await replacePlayer(store, action);\n    }\n    if (action.type === ROUND_ENDED) {\n      await endRound(store);\n    }\n  };\n\nasync function createGame(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    \"/api/v1/games\",\n    { method: \"POST\", body: { ...action.form, token } },\n    store.dispatch\n  );\n  if (!result.isError) store.dispatch(screenPushed(\"player\"));\n  store.dispatch(loadingFinished());\n}\n\nasync function joinGame(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    `/api/v1/games/join`,\n    { method: \"POST\", body: { ...action.form, token } },\n    store.dispatch\n  );\n  if (!result.isError) store.dispatch(screenPushed(\"player\"));\n  store.dispatch(loadingFinished());\n}\n\nasync function playGame(store: any, action: any) {\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    `/api/v1/games/${action.form.gameName}/by/${action.form.creatorName}?token=${token}`,\n    { method: \"GET\" },\n    store.dispatch\n  );\n  if (!result.isError) {\n    store.dispatch(gameReplaced(result));\n    store.dispatch(screenPushed(\"game\"));\n  }\n  store.dispatch(loadingFinished());\n}\n\nasync function refreshGame(store: any, action: any) {\n  const { gameName, creatorName } = getGame(store.getState())!;\n  store.dispatch(loadingStarted());\n  const token = getPlayerToken(store.getState());\n  const result = await fetchAndDispatchMessage(\n    `/api/v1/games/${gameName}/by/${creatorName}?token=${token}`,\n    { method: \"GET\" },\n    store.dispatch\n  );\n  store.dispatch(gameReplaced(result));\n  store.dispatch(loadingFinished());\n}\n\nasync function replacePlayer(store: any, action: any) {\n  const { game } = action as GameReplacedAction;\n  store.dispatch(playerReplaced(game!.playerName, game!.token));\n}\n\nasync function endRound(store: any) {\n  const { gameName, creatorName } = getGame(store.getState())!;\n  await gamePost(\n    store,\n    `/api/v1/games/${gameName}/by/${creatorName}/endRound`,\n    {},\n    () => store.dispatch(screenPushed(\"game\"))\n  );\n}\n"]},"metadata":{},"sourceType":"module"}